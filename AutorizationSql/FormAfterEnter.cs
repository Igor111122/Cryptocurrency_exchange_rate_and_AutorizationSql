using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading;
using System.Windows.Forms;
using MaterialSkin;
using MaterialSkin.Controls;
using System.Data.SqlClient;
using System.Configuration;
using System.Globalization;
using Microsoft.ML;

namespace AutorizationSql
{
    public partial class FormAfterEnter : MaterialForm
    {
        string BitcoinPrice2, EthereumPrice2, TetherPrice2, LitecoinPrice2, RipplePrice2,
            DogecoinPrice2, SolanaPrice2, MoneroPrice2, CardanoPrice2, TravalaPrice2, TerraPrice2;
        Random Forecasting = new Random();
        int count_of_iter_forecasting = 0;

        string Bitcoin_24h_Chg2, Ethereum_24h_Chg2, Tether_24h_Chg2, Litecoin_24h_Chg2, 
            Ripple_24h_Chg2, Dogecoin_24h_Chg2, Solana_24h_Chg2, Monero_24h_Chg2, Cardano_24h_Chg2, Travala_24h_Chg2, Terra_24h_Chg2;

        string Bitcoin_Forecasting2_price, Ethereum_Forecasting2_price, Litecoin_Forecasting2_price,
            Ripple_Forecasting2_price, Dogecoin_Forecasting2_price, Solana_Forecasting2_price, Cardano_Forecasting2_price;

        string Bitcoin_Forecasting2_percent_of_price, Ethereum_Forecasting2_percent_of_price, Litecoin_Forecasting2_percent_of_price,
            Ripple_Forecasting2_percent_of_price, Dogecoin_Forecasting2_percent_of_price, Solana_Forecasting2_percent_of_price, Monero_Forecasting2_percent_of_price, Cardano_Forecasting2_percent_of_price, Travala_Forecasting2_percent_of_price, Terra_Forecasting2_percent_of_price;

        string label_waiting_text = "";

        string bitcoin, ethereum, litecoin, ripple, dogecoin, solana, monero, cardano, travala, terra;

        string Bitcoin_Forecasting3_price, Ethereum_Forecasting3_price, Litecoin_Forecasting3_price,
    Ripple_Forecasting3_price, Dogecoin_Forecasting3_price, Solana_Forecasting3_price, Monero_Forecasting3_price, Cardano_Forecasting3_price, Travala_Forecasting3_price, Terra_Forecasting3_price;

        string Bitcoin_Forecasting4_price, Ethereum_Forecasting4_price, Litecoin_Forecasting4_price,
    Ripple_Forecasting4_price, Dogecoin_Forecasting4_price, Solana_Forecasting4_price, Monero_Forecasting4_price, Cardano_Forecasting4_price, Travala_Forecasting4_price, Terra_Forecasting4_price;

        string Bitcoin_Forecasting5_price, Ethereum_Forecasting5_price, Litecoin_Forecasting5_price,
    Ripple_Forecasting5_price, Dogecoin_Forecasting5_price, Solana_Forecasting5_price, Monero_Forecasting5_price, Cardano_Forecasting5_price, Travala_Forecasting5_price, Terra_Forecasting5_price;
        
        string Bitcoin_Forecasting6_price, Ethereum_Forecasting6_price, Litecoin_Forecasting6_price,
    Ripple_Forecasting6_price, Dogecoin_Forecasting6_price, Solana_Forecasting6_price, Monero_Forecasting6_price, Cardano_Forecasting6_price, Travala_Forecasting6_price, Terra_Forecasting6_price;

        private SqlConnection connection = null;


        public FormAfterEnter()
        {
            InitializeComponent();
            var materialSkinManager = MaterialSkinManager.Instance;
            materialSkinManager.AddFormToManage(this);
            materialSkinManager.Theme = MaterialSkinManager.Themes.LIGHT;
            string theme_of_reg_form = TextColor.Text;

            if (theme_of_reg_form == "1")
            {
                materialSkinManager.ColorScheme = new ColorScheme(MaterialSkin.Primary.Blue800, MaterialSkin.Primary.Blue900, MaterialSkin.Primary.Blue800, MaterialSkin.Accent.Cyan700, MaterialSkin.TextShade.WHITE);
            }
            if (theme_of_reg_form == "2")
            {
                materialSkinManager.ColorScheme = new ColorScheme(MaterialSkin.Primary.Green800, MaterialSkin.Primary.Green900, MaterialSkin.Primary.Green900, MaterialSkin.Accent.LightGreen700, MaterialSkin.TextShade.WHITE);
            }
            if (theme_of_reg_form == "3")
            {
                materialSkinManager.ColorScheme = new ColorScheme(MaterialSkin.Primary.Orange800, MaterialSkin.Primary.Orange900, MaterialSkin.Primary.Orange800, MaterialSkin.Accent.Yellow700, MaterialSkin.TextShade.WHITE);
            }
            connection = new SqlConnection(ConfigurationManager.ConnectionStrings["UsersDB"].ConnectionString);
            connection.Open();
        }

        private void FormAfterEnter_Load(object sender, EventArgs e)
        {
            TextColor.Text = "Поздравляю вы прошли авторизацию!";
            
            SqlDataReader sqlBitcoinReader = null;
            SqlCommand sqlCommand4 = new SqlCommand("SELECT Bitcoin,Ethereum,Litecoin,Ripple,Dogecoin,Solana,Monero,Cardano,Travala,Terra FROM Cryptocurrency", connection);

            sqlBitcoinReader = sqlCommand4.ExecuteReader();

            bitcoin = ethereum = litecoin = ripple = dogecoin = solana = monero = cardano = travala = terra = "";

            while (sqlBitcoinReader.Read())
            {
                bitcoin += Convert.ToString(sqlBitcoinReader["Bitcoin"]).Replace(",",".") + ",";
                ethereum += Convert.ToString(sqlBitcoinReader["Ethereum"]).Replace(",", ".") + ",";
                litecoin += Convert.ToString(sqlBitcoinReader["Litecoin"]).Replace(",", ".") + ",";
                ripple += Convert.ToString(sqlBitcoinReader["Ripple"]).Replace(",", ".") + ",";
                dogecoin += Convert.ToString(sqlBitcoinReader["Dogecoin"]).Replace(",", ".") + ",";
                solana += Convert.ToString(sqlBitcoinReader["Solana"]).Replace(",", ".") + ",";
                monero += Convert.ToString(sqlBitcoinReader["Monero"]).Replace(",", ".") + ",";
                cardano += Convert.ToString(sqlBitcoinReader["Cardano"]).Replace(",", ".") + ",";
                travala += Convert.ToString(sqlBitcoinReader["Travala"]).Replace(",", ".") + ",";
                terra += Convert.ToString(sqlBitcoinReader["Terra"]).Replace(",", ".") + ",";
            }

            bitcoin = bitcoin.TrimEnd(',');
            ethereum = ethereum.Remove(ethereum.IndexOf(",0.000"), ethereum.LastIndexOf(",0.000") - ethereum.IndexOf(",0.000") + 6);
            ethereum = ethereum.TrimEnd(',');
            litecoin = litecoin.Remove(litecoin.IndexOf(",0.000"), litecoin.LastIndexOf(",0.000") - litecoin.IndexOf(",0.000") + 6);
            litecoin = litecoin.TrimEnd(',');
            ripple = ripple.Remove(ripple.IndexOf(",0.000"), ripple.LastIndexOf(",0.000") - ripple.IndexOf(",0.000") + 6);
            ripple = ripple.TrimEnd(',');
            dogecoin = dogecoin.Remove(dogecoin.IndexOf(",0.000"), dogecoin.LastIndexOf(",0.000") - dogecoin.IndexOf(",0.000") + 6);
            dogecoin = dogecoin.TrimEnd(',');
            solana = solana.Remove(solana.IndexOf(",0.000"), solana.LastIndexOf(",0.000") - solana.IndexOf(",0.000") + 6);
            solana = solana.TrimEnd(',');
            monero = monero.TrimEnd(',');
            cardano = cardano.TrimEnd(',');
            travala = travala.TrimStart(',');
            travala = travala.TrimEnd(',');
            terra = terra.TrimStart(',');
            terra = terra.TrimEnd(',');

            Thread myThread = new Thread(new ThreadStart(update_price));
            myThread.Start();

            Thread myThread2 = new Thread(new ThreadStart(update_24h_Chg));
            myThread2.Start();

            Thread myThread3 = new Thread(new ThreadStart(Forecasting2));
            myThread3.Start();

            Thread myThread4 = new Thread(new ThreadStart(Forecasting3_4));
            myThread4.Start();

            Thread myThread5 = new Thread(new ThreadStart(Forecasting5_6));
            myThread5.Start();

            Change_color();

            Forecasting7();

            /*
            string temp_Bitcoin = "3434.020,3462.820,3414.480,3409.650,3429.090,3366.920,3359.300,3622.350,3622.890,3644.350,3589.750,3588.340,3579.790,3562.270,3563.090,3581.220,3622.370,3868.710,3889.920,3939.670,3899.320,3940.520,4113.540,3730.680,3820.710,3795.060,3798.470,3787.310,3805.430,3810.400,3788.000,3698.660,3844.070,3850.880,3855.050,3844.640,3916.430,3898.740,3851.200,3860.180,3848.760,3854.770,3901.940,3990.900,3963.900,3970.200,3997.970,4033.130,3973.470,3982.390,3982.520,3969.340,3910.510,3920.390,4025.560,4012.350,4087.170,4094.920,4095.650,4135.960,4898.420,4978.230,4906.420,5038.910,5043.960,5193.700,5289.900,5192.520,5316.430,5042.090,5074.830,5070.520,5162.000,5030.820,5202.430,5233.720,5278.120,5290.760,5324.160,5295.980,5388.490,5531.320,5441.480,5133.950,5152.260,5165.810,5148.380,5146.110,5266.780,5322.420,5385.000,5660.630,5768.060,5708.800,5683.350,5739.850,5938.000,6152.240,6342.470,7231.780,6994.430,7805.050,7986.000,8196.160,7880.000,7361.210,7271.260,8200.000,7991.400,7955.150,7624.950,7878.370,7999.020,8070.170,8733.550,8768.820,8737.850,8667.070,8277.760,8548.720,8560.010,8739.580,8107.610,7673.910,7785.210,7802.010,8001.250,7931.790,7641.040,8025.900,7914.000,8175.120,8233.380,8697.340,8858.840,8974.190,9333.480,9089.680,9284.210,9532.990,10222.120,10665.640,10831.650,11031.090,11760.000,12925.830,11155.570,12357.620,11875.320,10760.100,10577.430,10828.900,11967.430,11146.340,10997.840,11240.000,11469.960,12286.140,12567.230,12098.950,11349.240,11808.910,11378.790,10191.870,10850.000,9412.810,9699.350,10648.600,10535.430,10750.110,10600.240,10328.830,9847.020,9763.670,9883.960,9846.940,9481.370,9533.190,9495.390,9593.620,10085.340,10407.710,10529.510,10821.520,10986.960,11800.000,11470.000,11971.570,11983.430,11859.320,11273.200,11528.730,11385.110,10862.280,10022.990,10301.440,10354.340,10210.890,10318.990,10927.300,10772.220,10134.750,10112.010,10401.600,10149.700,10136.750,10360.970,10167.290,9711.780,9490.000,9579.750,9594.150,9767.530,10384.480,10617.610,10586.260,10573.660,10311.090,10484.390,10400.180,10307.450,10096.000,10154.460,10420.340,10368.650,10355.370,10305.740,10269.980,10195.730,10152.090,10271.530,10169.020,9985.280,10020.580,9840.560,8536.820,8432.160,8055.030,8187.720,8218.070,8047.600,8298.450,8319.010,8373.420,8239.920,8152.070,8145.170,7854.120,8205.530,8178.540,8586.340,8582.110,8265.550,8303.430,8310.170,8362.990,8155.130,7995.890,8073.320,7955.080,7960.490,8235.740,8213.650,8025.900,7470.770,7435.000,8662.660,9252.750,9557.080,9216.440,9426.940,9159.940,9150.070,9250.450,9304.750,9207.000,9410.760,9320.140,9344.780,9199.360,8767.370,8812.210,9043.060,8720.360,8813.910,8755.240,8636.900,8463.490,8484.630,8499.310,8170.650,8121.630,8088.440,7611.510,7285.850,7320.390,6908.360,7122.140,7159.220,7527.840,7436.720,7753.690,7550.670,7412.660,7309.640,7300.430,7197.780,7390.420,7541.790,7502.650,7524.260,7340.520,7216.070,7207.420,7188.420,7257.470,7059.030,7115.080,6882.190,6612.300,7286.910,7149.570,7194.110,7147.400,7509.700,7316.170,7251.520,7195.790,7188.300,7246.000,7296.240,7385.540,7220.240,7168.360,7178.680,6950.560,7338.910,7344.480,7356.700,7762.740,8159.010,8044.440,7806.780,8200.000,8016.220,8180.760,8105.010,8813.040,8809.170,8710.150,8892.630,8908.530,8696.600,8625.170,8717.890,8655.930,8378.440,8422.130,8329.500,8590.480,8894.540,9400.000,9289.180,9500.000,9327.850,9377.170,9329.390,9288.090,9159.370,9618.420,9754.630,9803.420,9902.000,10173.970,9850.010,10268.980,10348.780,10228.670,10364.040,9899.780,9912.890,9697.150,10185.170,9595.720,9612.760,9696.130,9668.130,9965.210,9652.580,9305.400,8779.360,8816.500,8703.840,8527.740,8528.950,8917.340,8755.450,8753.280,9066.650,9153.790,8893.930,8033.700,7936.250,7885.920,7934.570,4841.670,5622.740,5169.370,5343.640,5033.420,5324.990,5406.920,6181.180,6210.140,6187.780,5813.150,6493.510,6768.640,6692.220,6760.720,6376.030,6253.080,5870.900,6407.770,6421.140,6652.070,6801.990,6742.570,6879.610,6775.200,7352.430,7202.730,7367.360,7293.930,6877.030,6883.180,6908.240,6864.220,6879.750,6619.000,7111.670,7024.190,7228.470,7126.400,6841.000,6854.980,7137.790,7600.710,7509.830,7547.560,7701.730,7786.410,7767.790,8790.320,8627.320,8832.440,8983.790,8915.980,8882.870,9034.850,9154.320,10000.000,9801.350,9546.560,8731.170,8571.980,8825.460,9315.500,9784.180,9306.210,9389.070,9665.700,9721.910,9787.650,9516.510,9062.470,9171.960,9183.460,8718.770,8903.560,8840.910,9210.000,9577.380,9421.040,9705.100,9446.190,10203.640,9525.730,9668.990,9791.920,9619.990,9669.850,9750.040,9783.000,9821.880,9264.260,9463.070,9473.460,9329.990,9435.150,9530.300,9461.290,9374.780,9304.320,9357.020,9283.030,9683.120,9622.810,9286.060,9239.480,9158.260,9044.210,9118.010,9188.880,9132.960,9233.380,9092.920,9063.080,9138.520,9076.820,9348.220,9257.160,9437.160,9234.900,9283.530,9238.300,9306.170,9233.100,9251.590,9190.070,9132.870,9156.500,9177.430,9211.990,9175.450,9391.250,9539.510,9617.200,9547.910,9710.980,9944.650,11046.190,10939.270,11111.170,11112.120,11356.740,11817.490,11071.660,11236.390,11192.420,11755.240,11770.080,11600.850,11776.900,11654.090,11895.120,11392.640,11565.350,11793.260,11779.770,11852.200,11914.020,12298.380,12077.090,11757.550,11859.370,11530.000,11667.700,11644.650,11761.800,11328.880,11469.300,11330.000,11500.470,11471.710,11708.970,11640.000,11923.960,11398.440,10160.000,10456.320,10080.230,10260.170,10377.140,10123.960,10232.800,10342.590,10393.040,10443.330,10334.780,10675.150,10783.830,10951.540,10940.470,10938.950,11077.220,10923.500,10411.290,10534.310,10233.420,10744.020,10689.810,10729.090,10780.660,10689.480,10836.420,10778.220,10622.710,10578.540,10581.650,10669.630,10795.000,10606.330,10669.140,10925.200,11052.000,11301.200,11372.930,11535.980,11427.980,11428.840,11511.110,11340.070,11365.800,11519.970,11764.140,11921.110,12802.670,12971.600,12941.590,13122.730,13039.090,13066.730,13702.000,13274.730,13468.440,13562.130,13816.080,13762.000,13563.720,14041.580,14160.590,15605.040,15598.090,14838.970,15489.150,15332.040,15313.650,15707.890,16300.000,16335.580,16086.340,15862.630,16724.620,17645.000,17785.950,17825.470,18687.650,18725.000,18435.200,18383.350,19160.850,18732.430,17160.090,17154.390,17741.790,18192.030,19700.190,18771.430,19157.440,19468.740,18673.760,19162.160,19380.580,19173.500,18316.430,18556.640,18250.300,18040.020,18815.630,19162.360,19274.330,19434.870,21365.700,22814.240,23136.140,23842.990,23470.850,22732.010,23835.100,23247.710,23726.280,24705.150,26466.280,26259.600,27037.910,27370.000,28881.300,28992.790,29402.640,32216.530,33097.830,32005.880,34039.050,36849.940,39510.490,40667.070,40239.060,38173.730,35455.580,34035.020,37393.490,39134.350,36250.180,36000.000,36526.600,36616.950,35917.620,35496.910,30818.180,32992.060,32117.490,32288.830,32261.220,32504.530,30424.620,33484.870,34249.640,34323.000,33141.380,33532.740,35522.160,37691.630,36996.320,38320.000,39282.100,38858.390,46416.450,46505.200,44854.630,47981.480,47395.840,47183.680,48662.500,47942.570,49166.530,52174.280,51579.540,55988.580,56095.850,57492.910,54173.650,48887.930,49754.000,47088.580,46314.830,46109.980,45240.960,49629.330,48516.350,50379.680,48360.500,48739.210,48904.630,50967.300,52427.800,54929.020,55852.290,57772.090,57271.040,61165.190,59016.390,55644.370,56908.340,58901.800,57648.050,58072.000,58138.390,57381.790,54070.920,54361.570,52287.520,51326.110,55081.370,55839.420,55151.690,57600.100,58760.590,58782.580,58728.530,59003.600,57064.420,58212.180,59125.000,58018.300,55932.830,58096.600,58109.560,59766.930,59979.260,59831.660,63564.480,62986.090,63239.190,61436.240,60032.290,56280.600,55694.550,56503.190,53806.240,51683.950,51176.650,50118.940,49128.430,54073.410,55091.390,54901.970,53593.970,57775.270,57851.910,56622.660,57222.370,53236.840,57509.930,56447.390,57381.730,58984.750,58305.240,55880.720,56763.700,49386.560,49694.960,49880.430,46708.890,46444.750,43593.390,42877.750,36780.430,40640.900,37335.160,37500.540,34706.790,38839.860,38397.720,39309.560,38503.470,35692.460,34632.080,35677.720,37341.410,36693.300,37778.350,39219.880,36887.320,35532.140,35808.850,33582.620,33411.690,37400.000,36707.540,37341.110,35542.760,39013.760,40532.790,40171.470,38353.990,38097.680,35840.000,35507.060,35589.770,31634.160,32545.260,33652.280,34649.320,31597.750,32269.380,34699.500,34487.110,35907.930,35037.230,33564.210,33811.560,34688.300,35289.210,33704.210,34244.090,33882.470,32898.790,33826.430,33517.600,34258.530,33105.000,32728.000,32823.550,31848.650,31388.170,31529.680,31776.650,30829.290,29786.580,32138.450,32300.880,33684.170,34301.780,35428.280,37291.240,39475.410,40036.320,40037.510,42234.890,41490.130,39839.000,39165.550,38177.070,39741.120,40894.670,42856.590,44612.940,43858.420,46292.890,45609.700,45539.850,44444.450,47860.580,47119.730,47028.300,45930.510,44694.350,44721.130,46764.300,49356.000,48884.340,49301.860,49561.370,47731.330,49011.750,46856.290,49100.490,48935.360,48808.720,47003.440,47156.090,48853.490,49274.790,50025.040,49943.160,51809.280,52708.200,46866.820,46091.940,46392.810,44857.380,45176.660,46035.000,44974.340,47103.180,48150.940,47760.640,47305.180,48326.740,47245.250,43035.990,40596.540,43589.530,44903.500,42848.500,42722.190,43204.730,42189.810,41049.000,41542.900,43834.430,48171.860,47685.800,48235.930,49242.140,51501.190,55345.790,53787.600,53957.210,54976.920,54714.950,57485.200,55995.490,57374.550,57371.580,61657.350,60870.260,61538.970,62034.650,64241.610,65990.310,62219.440,60702.680,61338.760,60910.160,63101.430,60328.220,58465.900,60592.760,62301.590,61932.300,61359.440,60922.850,63260.000,62930.720,61457.250,61031.910,61542.440,63300.000,67559.000,66945.720,64921.430,64821.330,64158.410,64417.520,65509.870,63606.090,60142.310,60373.650,56917.660,58128.550,59768.540,58678.470,56294.110,57579.990,57185.060,58990.140,53789.350,54774.660,57338.550,57845.120,56974.120,57251.590,56547.960,53743.690,49234.970,49463.220,50555.000,50627.320,50543.300,47593.120,47142.420,49400.540,50124.380,46725.020,48389.960,48876.840,47663.420,46210.920,46881.870,46704.670,46915.000,48929.860,48618.990,50850.000,50841.480,50442.220,50791.210,50718.110,47543.300,46483.360,47150.710,46214.370,47777.420,47350.220,46439.890,45820.000,43435.800,43097.600,41535.660,41690.770,41875.810,41845.420,42736.000,43933.500,42571.940,43102.350,43102.010,43107.700,42255.070,42377.400,41683.210,40736.050,36495.460,35091.110,36293.620,36724.990,36975.910,38270.920,37208.360,37748.360,38192.650,37941.820,38491.920,38733.040,36923.500,37320.110,41579.570,41427.720,42420.240,43869.040,44091.560,44426.840,43524.600,42406.190,42206.010,42077.740,42540.300,44582.480,43901.480,40556.110,39996.990,40109.020,38373.900,37076.600,38269.940,37274.180,38376.880,39231.640,39146.660,37712.680,43178.980,44443.960,43936.720,42476.260,39175.560,39416.790,38438.890,38016.470,38753.650,41960.020,39444.450,38729.790,38822.020,37790.540,39665.710,39302.700,41142.760,40963.220,41794.370,42235.310,41242.140,40826.140,42826.180,42925.410,44025.990,44320.600,44535.650,46864.390,47152.380,47459.030,47068.080,45517.270,46307.810,45820.280,46442.000,46598.200,45502.730,43191.590,43454.530,42290.110,42376.000,42133.850,39524.860,40097.460,41147.740,39961.530,40563.180,40395.670,39691.270,40814.600,41505.770,41375.850,40470.760,39726.030,39421.590,39467.400,40441.110,38137.670,39256.050,39754.200,38593.420,37639.800,38488.340,38521.010,37729.950,39685.230,36533.930,36019.220,35463.460,34360.460,30082.000,30999.970,29000.000,28896.190,29238.810,30033.960,31295.030,29832.450,30425.360,28681.260,30290.330,29176.700,29421.050,30264.660,29081.760,29632.150,29510.150,29183.060,28589.480,29010.820,29448.940,31731.220,31762.760,29787.400,30437.180,29669.390,29853.510,29888.980,31351.210,31115.820,30185.580,30089.030,29065.660,28390.940,26585.100,22450.430,22097.300,22555.270,20382.880,20440.700,18956.800,20552.820,20520.000,21468.480,20110.180,20312.520,20857.310,21034.160,21297.850,20702.060,20659.510,20042.220,19090.770,19239.470,19228.250,19294.460,20209.530,20168.630,20547.450,21643.560,21584.140,21588.350,20856.080,19949.710,19321.140,20232.350,20577.230,20835.390,21195.490,20801.850,22435.040,23405.020,23208.530,23163.340,22682.260,22468.690,22595.810,21306.560,21259.780,22969.040,23853.110,23785.310,23644.580,23322.530,23282.920,23001.520,22835.880,22615.240,23326.400,22956.610,23187.620,23821.680,23164.780,23964.000,23959.000,24407.000,24456.000,24320.000,24139.000,23861.000,23340.000,23201.000,20841.000,21146.000,21514.000,21411.000,21520.000,21372.000,21571.000,20614.000,19928.000,20118.000,20302.000,19819.000,20059.000,20128.000,19959.000,19840.000,20007.000,19794.000,18789.000,19276.000,19322.000,21371.000,21672.000,21835.000,22401.000,20177.000,20233.000,19691.000,19802.000,20114.000,19419.000,19538.000,18878.000,18466.000,19403.000,19294.000,18921.000,18810.000,19226.000,19075.000,19413.000,19592.000,19425.000,19312.000,19051.000,19537.000,20343.000,20162.000,19951.000,19532.000,19420.000,19445.000,19131.000,19059.000,19157.000,19377.000,19181.000,19066.000,19264.000,19547.000,19409.000,19126.000,19043.000,19165.000,19206.000,19574.000,19332.000,20087.000,20775.000,20296.000,20599.000,20821.000,20628.000,20498.000,20480.000,20154.000,20250.000,21153.000,21301.000,20907.000,20590.000,18550.000,15877.000,17551.000,17007.000,16788.000,16310.000,16589.000,16874.000,16654.000,16686.000,16683.000,16690.000,16256.000,15766.000,16197.000,16603.000,16591.000,16508.000,16454.000,16424.000,16210.000,16434.000,17170.000,16977.000,17095.000,16886.000,16981.000,16968.000,17087.000,16836.000,17229.000,17128.000,17128.000,17091.000,17209.000,17772.000,17803.000,17362.000,16633.000,16781.000,16749.000,16446.000,16898.000,16824.000,16821.000,16779.000,16839.000,16828.000,16917.000,16700.000,16540.000,16628.000,16603.000,16528.000,16615.000,16673.000,16670.000,16849.000,16826.000,16950.000,16945.000,17119.000,17179.000,17446.000,17930.000,18853.000,19931.000,20960.000,20885.000,21189.000,21134.000,20670.000,21086.000,22678.000,22783.000,22717.000,22922.000,22637.000,23054.000,23010.000,23083.000,23033.000,23746.000,22831.000,23127.000,23735.000,23498.000,23434.000,23330.000,22937.000,22763.000,23252.000,22961.000,21802.000,21639.000,21868.000,21789.000,21790.000,22211.000,24332.000,23521.000,24580.000,24640.000,24296.000,24513.000";
            string temp_Ethereum = "106.010,109.070,105.940,105.950,106.000,103.320,103.300,118.190,117.920,123.940,119.560,120.930,120.610,119.280,120.290,121.680,132.280,144.520,142.760,147.030,144.150,146.400,157.380,131.840,137.450,135.900,134.110,134.340,134.750,132.180,129.630,125.160,136.140,137.120,136.100,132.800,136.510,134.590,131.940,132.850,131.030,131.300,135.790,140.380,138.150,136.860,137.960,138.710,134.490,135.600,136.600,135.460,133.250,133.100,138.970,137.350,142.790,142.270,141.020,141.000,164.580,160.890,157.720,166.060,166.000,174.900,180.450,175.590,177.470,164.960,164.110,163.650,168.000,159.910,166.500,166.740,174.170,173.660,173.500,169.870,171.470,170.300,165.740,152.000,153.180,155.680,153.130,152.300,160.310,158.300,158.520,164.820,161.900,161.150,171.210,166.140,169.340,170.140,172.180,192.000,188.270,196.130,217.500,248.740,264.510,244.090,234.030,261.000,252.680,254.770,243.310,245.790,249.650,251.950,268.210,271.790,271.000,269.290,254.360,267.760,264.560,269.420,249.500,240.660,246.180,249.460,250.170,244.430,231.730,247.810,245.250,262.540,255.430,263.690,269.290,268.190,273.940,264.240,268.900,272.010,295.930,308.320,306.390,310.480,316.880,334.780,293.570,309.870,318.000,289.670,293.690,291.360,301.980,282.770,287.950,287.650,306.590,313.210,307.600,288.730,269.010,275.660,269.060,225.890,228.650,198.440,211.470,226.030,221.340,228.660,225.280,217.130,211.960,216.570,219.170,219.210,206.880,211.140,210.810,209.810,218.680,217.720,217.620,222.030,223.000,232.920,225.920,226.000,220.970,210.590,206.460,216.020,211.180,208.490,186.120,188.310,185.270,185.510,194.720,202.400,196.410,187.170,190.810,194.510,191.060,186.450,188.380,187.450,172.830,168.920,168.330,171.870,171.270,178.750,178.910,174.910,174.620,169.090,178.300,181.480,180.570,179.760,178.330,180.720,181.300,188.730,189.540,197.820,207.830,210.250,220.780,218.110,214.770,211.170,207.460,166.900,169.970,165.710,173.790,173.800,169.420,181.340,176.200,180.860,175.020,176.490,176.630,170.120,180.230,180.730,193.180,191.640,180.840,180.020,181.890,186.740,180.670,174.750,177.510,173.210,172.080,175.620,174.240,171.290,162.490,160.660,181.510,179.930,184.340,181.980,190.950,183.310,182.690,183.420,182.720,181.570,186.310,188.680,191.140,186.230,183.880,185.040,189.180,184.390,186.730,187.750,184.450,179.820,182.330,183.850,177.860,175.650,174.230,160.900,150.170,152.340,139.790,145.940,147.770,152.640,150.960,154.600,151.650,151.130,149.040,147.380,145.460,147.990,148.490,147.310,150.620,147.360,145.640,143.200,144.740,144.590,141.640,142.330,132.290,121.780,132.940,128.150,128.280,127.110,132.280,128.110,127.740,124.970,125.430,126.310,127.730,134.250,131.050,128.630,130.270,126.760,133.890,133.850,134.940,144.370,143.000,140.480,137.920,144.730,142.630,146.280,143.510,165.930,166.260,164.090,169.620,174.240,166.720,166.650,169.350,167.810,162.510,162.150,160.540,167.650,169.730,175.800,173.450,184.300,179.840,183.510,188.160,189.660,188.150,203.540,213.090,223.430,223.200,228.420,222.740,237.950,266.420,268.940,285.960,264.670,258.890,268.300,281.870,258.570,257.420,265.710,262.130,275.660,266.040,246.580,223.760,227.230,227.260,217.630,217.340,231.970,223.460,224.520,228.810,245.520,237.540,199.380,202.930,200.390,194.570,109.420,135.450,122.430,123.550,111.040,115.910,118.630,136.750,133.500,132.650,122.470,136.540,139.120,136.420,138.970,131.430,131.350,124.590,132.360,133.140,135.980,141.710,141.400,144.590,143.030,171.650,164.550,173.230,170.070,157.970,158.650,158.390,157.030,158.610,152.960,172.370,171.000,184.330,179.400,170.640,170.340,185.670,187.790,194.000,197.960,196.900,196.730,215.670,206.200,212.020,214.070,210.200,207.010,205.620,199.130,212.560,211.590,210.210,186.270,186.180,189.790,199.800,203.220,194.570,200.430,207.030,214.840,214.620,209.980,199.000,199.640,204.040,201.160,208.320,220.570,220.600,243.280,231.630,248.030,237.720,244.690,243.320,240.190,242.210,244.740,246.820,244.860,230.140,237.410,238.120,231.590,230.780,235.280,233.620,231.160,228.640,228.830,227.730,243.330,243.230,234.430,232.440,229.310,221.520,224.940,227.870,225.620,231.050,226.530,225.240,229.200,227.780,241.880,239.230,247.160,242.040,241.110,239.220,242.740,239.490,240.450,238.270,233.560,232.590,235.840,239.240,237.890,245.910,264.230,275.660,279.320,305.660,311.470,322.860,317.530,318.400,335.040,346.670,387.320,371.960,386.300,389.750,401.210,394.900,379.710,397.480,390.320,395.990,378.980,382.660,424.900,438.720,432.780,434.050,430.860,422.090,407.430,416.180,388.110,393.820,390.860,406.820,383.780,388.360,382.920,395.420,398.580,428.920,434.000,475.590,439.920,401.860,385.940,334.910,352.760,353.530,337.280,351.210,367.900,374.060,387.580,366.480,377.250,364.030,365.110,389.270,384.840,385.530,370.860,340.180,344.040,320.170,349.030,351.510,352.440,357.390,353.950,359.800,359.940,352.950,345.680,346.310,352.680,353.640,351.780,341.860,350.120,365.510,371.060,374.330,386.430,381.500,378.860,377.880,365.610,368.560,378.480,379.170,368.680,391.590,416.050,409.760,412.620,406.280,393.110,403.910,388.600,387.340,382.610,387.010,396.780,383.860,388.420,403.060,417.050,446.920,435.460,454.830,444.280,450.550,464.330,463.060,477.180,461.310,448.450,460.570,482.960,478.710,472.900,510.350,543.770,561.260,609.350,605.720,569.640,520.210,518.650,537.920,567.830,617.000,586.160,598.200,616.740,567.780,597.160,598.920,591.650,554.720,575.890,558.110,543.760,568.200,591.340,586.170,589.040,638.310,643.710,655.000,658.710,638.490,607.770,637.230,585.430,612.230,626.780,636.490,683.600,729.630,731.800,752.710,737.240,731.180,775.590,979.330,1042.950,1102.970,1212.850,1226.560,1217.840,1280.110,1256.000,1087.820,1048.420,1130.760,1233.010,1170.930,1228.190,1232.950,1257.860,1369.620,1377.800,1110.370,1234.770,1234.520,1393.500,1317.920,1367.960,1240.620,1331.710,1379.350,1378.150,1314.170,1375.280,1513.000,1667.280,1598.890,1721.040,1679.460,1615.440,1752.300,1772.940,1743.140,1788.180,1851.760,1816.330,1802.000,1780.190,1781.160,1851.260,1939.050,1958.160,1918.920,1935.240,1778.720,1578.140,1625.510,1480.160,1447.060,1459.030,1421.770,1570.830,1488.800,1568.000,1538.230,1527.290,1651.160,1727.300,1835.060,1872.780,1793.510,1826.230,1767.480,1920.980,1848.370,1793.210,1805.650,1822.300,1776.020,1809.440,1803.790,1783.590,1681.690,1670.160,1582.940,1586.260,1699.370,1713.600,1686.500,1817.220,1842.120,1917.910,1967.820,2134.560,2008.280,2075.740,2107.230,2112.690,1963.080,2081.000,2065.930,2134.220,2148.150,2136.770,2299.690,2432.630,2517.350,2426.190,2317.110,2241.500,2163.770,2333.710,2358.130,2400.000,2369.770,2217.330,2321.810,2534.690,2668.890,2750.370,2758.060,2777.110,2947.570,2977.160,3430.160,3238.420,3528.200,3490.330,3483.810,3915.000,3910.420,3950.360,4179.470,3810.190,3720.210,4080.310,3646.010,3585.360,3281.320,3380.570,2446.910,2774.370,2436.110,2296.310,2098.330,2651.700,2704.310,2889.650,2741.070,2413.170,2279.590,2389.910,2707.270,2634.300,2707.660,2856.410,2691.140,2629.400,2710.480,2593.470,2508.850,2612.130,2472.270,2353.100,2367.000,2510.530,2583.060,2544.580,2366.560,2371.130,2227.290,2165.000,2242.600,1887.630,1880.790,1968.700,1989.630,1810.880,1831.030,1983.220,2082.460,2162.500,2276.340,2107.770,2155.070,2227.690,2324.490,2199.000,2323.160,2312.920,2114.790,2146.580,2109.760,2138.960,2034.880,1940.150,1993.910,1915.930,1876.660,1898.480,1890.990,1817.290,1786.540,1995.500,2023.000,2126.200,2185.860,2194.000,2228.000,2304.620,2299.520,2383.890,2464.180,2525.760,2556.300,2608.070,2508.040,2725.340,2830.090,2892.510,3162.810,3015.330,3167.000,3141.680,3161.790,3044.740,3324.520,3267.790,3311.440,3146.830,3011.950,3014.150,3185.180,3285.640,3226.150,3241.550,3317.250,3175.680,3230.850,3093.480,3276.680,3245.000,3225.340,3226.490,3432.540,3831.700,3786.560,3938.740,3887.100,3951.480,3928.290,3429.610,3492.640,3424.010,3209.710,3266.980,3406.080,3281.620,3437.000,3615.240,3571.250,3398.900,3435.780,3328.810,2977.580,2765.880,3079.090,3154.030,2929.300,2925.750,3064.320,2923.930,2807.460,2851.400,3000.590,3311.720,3391.710,3417.430,3383.880,3516.090,3576.540,3587.910,3563.150,3574.030,3422.000,3543.940,3490.180,3609.350,3790.530,3868.990,3829.260,3844.970,3744.750,3878.130,4163.580,4055.820,3970.420,4172.370,4082.170,4220.890,4131.910,3923.220,4289.810,4417.000,4323.270,4288.580,4323.950,4595.580,4606.950,4538.200,4480.000,4522.650,4617.750,4811.590,4733.090,4634.190,4723.510,4673.950,4646.020,4630.850,4562.300,4209.770,4291.830,3999.760,4300.360,4415.510,4265.940,4094.090,4342.530,4270.670,4525.780,4045.900,4100.300,4300.860,4448.710,4630.880,4587.580,4516.030,4222.800,4124.510,4198.730,4357.060,4311.660,4442.560,4105.610,3901.670,4089.220,4136.060,3786.590,3862.680,4020.510,3955.080,3877.300,3961.560,3922.280,3946.120,4018.390,3981.730,4113.760,4049.930,4099.240,4062.580,4037.400,3793.080,3627.680,3711.820,3677.000,3768.130,3830.840,3764.900,3786.640,3538.660,3408.350,3196.030,3081.090,3151.580,3083.160,3242.740,3374.650,3241.820,3308.820,3329.710,3350.150,3211.220,3163.040,3083.120,2999.530,2568.580,2412.040,2543.270,2443.430,2459.840,2620.890,2425.240,2547.400,2603.890,2602.370,2688.910,2791.040,2682.300,2697.560,2997.770,3016.450,3058.170,3142.240,3120.910,3247.460,3076.070,2928.660,2916.900,2872.780,2936.130,3187.280,3123.240,2899.880,2782.720,2764.600,2620.800,2571.590,2638.750,2579.620,2599.040,2769.950,2779.620,2617.970,2925.520,2976.320,2950.570,2834.570,2622.440,2666.400,2549.400,2493.230,2577.820,2728.450,2609.540,2557.640,2569.160,2516.850,2590.890,2619.620,2775.550,2815.510,2940.060,2949.680,2859.930,2901.180,3017.880,3037.540,3112.230,3106.130,3147.220,3298.060,3334.500,3401.940,3386.700,3281.760,3457.980,3443.620,3511.530,3522.060,3405.720,3168.930,3229.910,3193.190,3221.630,3202.370,2979.580,3029.730,3117.990,3022.260,3041.540,3060.950,2988.570,3057.570,3102.660,3077.490,2984.820,2963.420,2933.340,2922.490,3005.700,2811.080,2890.680,2937.500,2818.050,2728.080,2826.820,2856.350,2780.170,2939.830,2747.440,2693.100,2635.900,2525.730,2232.060,2342.120,2075.770,1950.450,2007.450,2054.230,2143.090,2020.840,2089.360,1911.220,2017.850,1957.090,1973.240,2040.720,1971.350,1978.130,1941.500,1791.380,1722.900,1790.980,1811.840,1996.740,1940.550,1817.050,1832.680,1773.900,1803.200,1804.980,1859.060,1812.240,1790.410,1787.130,1660.550,1530.300,1432.900,1208.700,1205.580,1237.230,1067.600,1084.420,996.2800,1127.330,1113.560,1169.370,1068.290,1092.130,1193.110,1188.160,1222.880,1182.950,1187.380,1110.250,1027.700,1058.290,1065.560,1073.250,1149.570,1132.340,1186.010,1237.640,1213.610,1216.490,1166.530,1095.640,1035.590,1115.010,1192.470,1231.620,1356.990,1338.690,1581.150,1542.990,1522.150,1576.390,1535.470,1549.510,1598.940,1440.560,1449.840,1637.600,1725.560,1723.620,1697.490,1680.110,1631.700,1631.240,1619.050,1606.860,1736.950,1691.580,1700.970,1778.430,1704.020,1854.700,1883.000,1960.400,1984.300,1936.800,1902.500,1883.000,1835.000,1847.100,1609.000,1576.200,1617.500,1625.400,1665.400,1657.200,1697.000,1549.800,1458.800,1493.300,1553.900,1523.300,1554.200,1585.600,1575.800,1557.900,1580.000,1617.500,1557.400,1630.300,1635.200,1719.200,1775.400,1766.800,1717.000,1574.700,1638.600,1472.600,1434.700,1469.100,1334.300,1375.900,1323.300,1247.500,1326.200,1327.200,1317.200,1292.600,1336.700,1327.900,1337.200,1336.200,1328.600,1311.900,1276.500,1315.900,1362.100,1352.400,1352.500,1331.500,1315.800,1323.500,1290.200,1280.000,1294.500,1287.600,1296.900,1275.200,1306.100,1331.500,1310.300,1285.200,1283.100,1300.000,1313.900,1364.100,1343.900,1460.200,1566.800,1514.100,1554.900,1620.700,1589.900,1573.400,1578.800,1518.600,1531.100,1645.200,1627.400,1568.400,1568.300,1334.200,1099.700,1294.900,1284.800,1255.200,1219.500,1241.600,1252.300,1216.000,1200.100,1211.800,1216.800,1141.400,1105.600,1138.200,1183.200,1203.200,1198.200,1204.900,1193.100,1167.600,1215.700,1295.100,1276.500,1296.000,1241.300,1258.300,1259.600,1271.400,1231.200,1280.800,1262.900,1266.700,1263.600,1274.700,1320.500,1307.300,1266.400,1167.300,1187.600,1183.100,1167.700,1216.900,1214.000,1218.000,1220.300,1220.500,1218.100,1227.700,1211.000,1189.500,1200.200,1199.300,1195.100,1200.000,1214.500,1214.500,1256.500,1250.600,1269.200,1263.900,1289.600,1320.500,1335.500,1390.200,1416.600,1451.000,1550.000,1553.200,1577.100,1565.100,1511.700,1551.400,1658.400,1626.400,1628.000,1626.400";
            string temp_Litecoin = "32.280,34.150,33.000,33.690,33.900,32.490,32.750,42.770,44.190,46.300,42.480,43.290,41.200,40.930,42.150,42.930,43.490,47.500,46.890,51.030,48.490,49.090,51.250,43.640,45.350,44.620,44.870,45.520,46.920,48.360,47.650,45.720,52.310,55.110,56.540,55.290,57.540,56.280,54.630,56.240,55.330,55.700,58.190,60.920,60.240,59.050,59.220,60.110,58.510,59.300,60.380,59.570,58.780,58.330,61.250,60.180,61.160,60.160,60.410,60.430,77.570,85.670,84.670,88.600,92.650,91.820,89.300,86.950,88.090,79.440,79.090,77.970,83.710,78.350,81.080,79.190,82.080,82.570,81.900,77.510,76.800,74.160,73.110,70.750,71.700,70.270,67.640,66.500,73.170,72.530,72.470,77.790,77.310,74.750,74.250,73.250,73.950,73.950,76.760,87.880,84.710,87.870,91.490,102.15,95.680,89.850,86.990,95.000,91.550,91.430,87.710,88.980,100.61,103.10,112.75,116.39,114.88,115.21,108.17,114.21,112.27,115.07,105.95,102.00,104.00,111.35,117.15,118.52,115.07,129.92,136.28,135.97,130.94,132.79,138.39,136.79,134.00,135.00,136.62,135.52,138.88,141.47,136.44,135.22,135.71,130.52,113.95,119.33,133.36,122.01,122.49,118.62,121.82,119.55,118.60,118.15,120.11,123.37,119.29,108.31,103.27,105.14,101.11,89.730,90.610,79.590,90.350,101.20,98.800,100.50,99.800,95.210,89.770,94.430,93.420,94.100,88.810,90.060,90.280,90.360,98.780,98.990,94.700,94.310,93.080,96.180,93.120,90.600,89.990,84.240,85.150,89.850,85.670,84.350,75.620,76.190,74.990,72.780,76.200,77.190,75.110,73.060,73.560,75.560,73.280,72.150,73.430,72.820,66.720,63.410,64.150,64.410,66.150,67.140,69.000,67.160,65.370,65.020,68.810,70.550,70.110,70.840,69.790,69.210,68.830,70.640,70.050,72.760,74.160,77.600,76.920,75.020,73.240,72.480,72.100,54.660,57.470,55.030,56.060,55.330,53.870,56.150,55.710,56.420,56.370,56.570,56.930,54.510,57.610,57.050,59.240,57.680,55.770,55.780,56.680,56.830,54.630,52.480,54.890,53.310,53.740,54.900,54.730,53.450,49.520,49.680,56.770,56.830,59.950,57.920,59.820,57.920,58.500,58.430,58.410,58.450,61.450,63.110,64.210,61.330,60.220,62.050,63.750,61.600,61.160,60.860,58.840,57.380,58.380,59.140,55.770,55.080,54.870,50.590,47.520,48.310,44.000,45.790,47.000,47.780,46.930,48.730,47.370,47.540,45.550,44.820,44.710,44.820,45.480,45.190,45.620,44.470,44.120,43.630,43.620,44.400,43.220,43.400,39.850,36.880,40.930,39.550,40.230,39.640,41.990,40.660,40.310,40.040,39.850,40.940,42.690,43.060,42.260,41.090,41.390,39.280,42.150,42.790,43.250,45.820,46.390,45.320,44.880,49.220,49.340,51.330,49.510,58.610,58.010,57.720,61.080,59.180,57.650,57.250,57.680,58.060,54.380,54.150,53.290,56.220,58.570,60.760,59.870,68.040,67.830,70.710,69.670,69.580,67.840,72.440,73.380,74.340,76.790,77.130,74.270,77.000,81.250,80.490,83.250,76.530,74.990,73.400,77.300,70.610,69.680,73.440,75.090,79.770,75.630,70.730,60.560,61.590,60.020,58.130,57.900,61.380,60.870,60.280,61.860,63.290,60.510,51.090,50.460,50.140,48.600,30.760,37.900,34.350,36.300,33.470,34.450,34.640,39.050,38.120,38.420,35.410,39.080,40.720,39.250,40.610,38.170,38.970,37.100,39.090,39.350,39.300,39.830,40.620,40.800,40.470,45.100,44.800,46.570,46.500,42.000,41.290,41.250,39.310,42.340,42.350,43.730,42.320,40.250,40.650,41.810,42.900,44.500,44.340,44.650,44.590,45.800,48.780,46.260,47.040,49.240,48.100,47.120,46.640,45.000,47.470,47.720,47.000,42.190,41.730,42.190,43.260,43.880,42.780,43.220,43.680,45.320,45.780,44.170,42.670,44.170,43.900,42.100,42.950,42.300,43.880,44.780,44.520,47.760,45.570,48.290,46.050,47.120,47.470,46.840,46.790,46.550,46.480,45.970,43.170,44.690,45.110,43.990,43.850,43.790,44.060,43.440,42.870,43.580,42.940,44.350,44.150,42.630,42.320,43.080,41.200,41.370,41.900,41.220,41.830,41.060,41.190,42.080,41.630,44.070,43.410,45.340,44.400,44.320,44.740,44.660,43.910,43.880,43.270,42.080,41.860,42.460,42.670,42.260,43.810,45.090,45.000,44.210,49.160,48.090,53.360,55.910,55.220,56.800,58.200,61.680,56.850,59.280,57.640,58.910,59.070,57.240,58.500,57.000,58.400,54.150,54.520,57.080,56.830,59.970,63.870,67.310,66.890,62.140,62.920,59.550,60.450,60.560,62.040,58.620,58.460,55.790,57.400,56.990,61.100,60.960,62.690,58.120,47.550,50.540,47.450,48.470,47.740,47.420,47.830,48.730,49.110,50.860,48.110,49.100,48.320,47.740,48.880,48.190,48.320,47.110,43.180,44.450,42.920,44.970,45.900,46.030,46.020,45.260,45.710,45.810,45.810,44.940,45.950,46.710,46.370,46.010,46.660,47.280,47.860,48.800,50.550,50.670,49.870,49.840,49.470,47.590,46.890,47.600,48.010,46.890,53.240,54.680,55.520,59.260,58.840,56.920,57.950,55.950,54.910,54.070,55.740,55.600,53.920,53.920,54.720,58.960,63.390,59.040,61.060,59.280,57.920,59.290,60.740,65.850,63.990,62.360,70.750,76.440,73.820,81.660,82.520,87.200,82.940,89.220,89.330,81.720,71.000,69.090,72.550,78.980,87.660,87.830,89.060,89.140,80.050,83.180,83.830,83.500,76.800,77.440,74.780,72.240,76.580,82.080,82.480,81.310,93.010,101.07,109.33,119.95,114.81,104.62,114.50,102.60,111.83,127.29,129.50,127.83,129.73,128.84,130.15,124.36,126.32,136.88,155.89,155.06,158.05,169.65,169.94,172.52,177.96,170.70,138.93,133.09,147.79,152.78,144.20,143.87,142.63,151.63,151.89,149.93,130.08,138.17,137.77,141.22,137.18,134.75,122.95,133.60,134.93,133.32,129.70,132.03,142.53,156.50,145.40,155.18,155.53,151.19,167.65,181.91,181.80,184.04,196.98,226.45,213.69,208.09,210.49,237.41,226.60,236.82,227.95,227.68,208.26,177.50,181.94,179.25,170.31,172.15,165.01,176.11,178.37,187.70,180.78,180.98,182.62,190.61,191.55,204.00,200.36,201.41,220.70,226.33,213.92,200.81,201.78,205.82,199.57,200.27,200.05,195.39,185.75,186.08,176.18,171.50,183.77,184.16,184.35,193.69,195.79,196.58,202.31,212.03,195.39,202.31,221.60,237.10,219.05,226.27,220.90,255.93,252.00,244.68,267.66,279.43,286.89,309.05,301.86,273.53,261.57,261.05,258.09,253.06,241.59,225.30,223.96,247.80,260.19,258.88,255.79,271.54,276.80,269.29,294.57,305.28,356.28,354.62,344.77,347.39,388.32,359.17,378.09,309.23,318.00,326.49,300.20,289.18,281.29,294.06,186.66,211.02,180.45,169.37,142.67,185.47,183.76,199.20,193.49,177.46,163.69,170.73,188.31,182.83,187.23,193.23,178.62,172.78,176.29,162.08,160.74,171.56,168.07,162.87,163.10,170.91,179.84,175.28,166.25,167.09,156.00,153.05,154.69,124.95,119.72,128.85,134.49,125.24,126.66,132.70,137.28,144.15,144.26,137.08,136.88,140.16,144.88,138.32,138.93,137.08,132.20,134.37,133.89,134.12,133.56,130.94,130.85,125.66,120.65,119.96,119.56,113.07,107.20,117.43,120.68,124.29,126.04,127.76,131.24,134.84,139.77,141.41,145.61,144.44,140.50,141.36,138.21,142.43,143.49,147.83,156.45,149.87,166.53,165.63,170.66,165.04,183.79,182.66,184.77,178.75,168.50,167.13,175.55,183.75,179.79,186.40,187.00,173.70,177.74,167.62,176.17,175.78,174.47,167.34,171.53,180.99,183.52,213.15,212.08,232.47,219.57,178.41,179.14,180.27,173.89,178.48,183.04,179.15,183.02,189.20,185.82,179.96,181.38,175.58,157.16,148.50,161.54,164.01,152.24,151.05,150.74,145.08,140.56,144.74,153.00,166.18,169.29,170.57,167.55,173.88,178.33,178.75,175.96,179.65,174.91,179.24,172.63,177.60,180.85,189.56,185.67,183.60,185.52,188.88,207.37,197.33,190.84,195.99,190.81,195.31,197.46,179.23,189.65,196.71,190.31,192.08,197.67,200.89,207.19,202.91,199.52,197.68,202.10,228.55,262.24,260.53,262.46,251.19,257.70,279.38,263.04,230.43,229.96,204.36,218.07,227.07,222.15,209.28,216.50,212.34,223.21,194.88,195.47,199.80,205.90,207.86,208.72,203.60,187.68,163.13,156.53,161.67,162.17,165.48,151.38,148.40,158.01,159.05,144.73,150.41,153.61,148.66,144.56,148.80,153.04,152.67,154.87,155.37,163.48,160.80,157.95,155.90,155.93,145.77,145.41,148.00,145.97,150.91,151.15,148.47,146.64,135.28,135.87,131.21,129.65,130.95,126.42,131.24,141.54,136.38,144.76,147.77,146.38,151.38,141.42,136.35,129.84,114.79,108.31,112.41,109.53,107.95,111.97,106.89,109.46,110.92,108.79,109.61,115.09,108.37,111.06,121.42,122.03,127.83,137.41,133.78,140.09,134.71,125.70,126.79,125.64,124.69,131.76,127.79,116.43,114.89,115.70,110.56,102.66,107.46,105.49,104.28,109.15,108.17,103.11,113.74,112.56,110.31,111.89,101.17,104.97,101.04,98.640,100.72,106.91,102.66,104.78,105.38,101.75,105.66,106.93,111.47,110.31,111.98,116.77,114.93,114.61,120.35,122.49,126.67,123.95,124.84,129.67,127.56,130.28,131.11,123.56,124.93,124.90,127.86,124.79,122.72,111.67,114.13,110.84,111.44,110.58,102.51,104.86,110.46,107.46,111.04,114.22,108.85,111.25,113.86,111.86,106.73,105.42,105.29,104.60,104.72,98.060,100.50,103.26,100.27,95.940,99.520,100.56,99.300,106.27,96.880,96.660,94.320,93.640,76.450,80.140,66.090,64.180,67.720,68.800,71.580,66.910,72.970,65.810,72.020,68.540,69.660,71.620,68.940,70.310,68.140,63.420,61.460,63.030,63.650,69.000,68.360,62.580,64.380,62.460,63.650,63.070,64.370,63.810,61.340,60.110,56.640,52.030,48.130,43.550,46.170,50.640,44.720,47.590,47.210,54.310,52.090,54.330,51.210,54.040,55.400,56.250,58.330,55.670,54.440,53.020,51.200,51.130,50.390,50.820,52.300,49.690,50.290,52.100,51.300,54.080,52.160,48.700,47.680,49.540,51.240,51.720,55.080,55.620,58.590,57.980,57.180,58.110,56.050,56.320,58.640,54.130,53.750,59.030,63.380,60.720,60.410,59.810,59.530,58.430,57.800,59.880,62.490,61.140,61.130,62.640,59.300,61.530,61.890,62.970,63.740,63.240,61.360,61.100,60.400,59.990,54.080,54.140,55.520,57.290,57.070,56.420,56.620,53.790,52.250,55.510,55.790,52.910,53.780,57.500,60.970,60.140,60.890,60.370,54.080,57.240,57.990,61.310,63.330,62.210,61.370,59.070,60.140,56.400,55.900,57.670,52.750,52.970,52.340,51.090,53.960,55.000,53.430,52.370,53.390,52.810,53.250,53.920,53.410,52.900,51.820,53.630,55.340,54.620,53.450,52.830,52.810,53.770,52.660,52.020,52.240,51.220,51.290,50.470,51.510,51.910,51.470,51.070,50.980,51.620,52.180,54.020,52.600,55.940,56.410,54.730,55.020,56.620,55.360,55.040,55.180,60.940,61.840,67.620,69.350,67.980,67.400,57.780,50.220,60.150,61.240,59.840,57.510,56.440,57.930,57.540,62.500,62.620,63.770,61.850,61.650,70.590,78.790,78.610,74.070,76.300,74.750,73.870,75.700,79.160,77.440,77.920,76.570,75.940,80.240,79.960,77.060,78.420,76.290,76.350,76.600,76.240,77.240,75.410,72.210,66.370,65.070,64.390,63.330,65.670,65.440,66.150,65.780,65.760,69.140,70.600,68.730,66.280,66.820,67.880,69.940,70.840,74.750,75.600,75.510,74.010,75.930,76.350,78.460,81.800,80.700,84.070,86.010,86.320,87.690,87.380,85.810,87.070,82.760,84.130,90.480,88.000,87.660,89.930,87.220,89.280,87.590,88.750,89.810,95.040,91.290,94.350,100.33,98.590,99.950,98.350,96.730,95.900,100.92,99.160,92.130,93.450,94.400";
            string temp_Ripple = "0.304,0.307,0.298,0.295,0.296,0.285,0.288,0.308,0.308,0.307,0.298,0.300,0.300,0.297,0.298,0.297,0.299,0.318,0.321,0.328,0.317,0.318,0.331,0.296,0.326,0.315,0.309,0.312,0.314,0.313,0.309,0.300,0.313,0.314,0.311,0.306,0.311,0.310,0.308,0.308,0.311,0.309,0.313,0.317,0.313,0.312,0.314,0.316,0.308,0.309,0.309,0.306,0.300,0.301,0.308,0.304,0.307,0.309,0.308,0.311,0.354,0.342,0.330,0.363,0.352,0.362,0.357,0.349,0.354,0.328,0.324,0.325,0.329,0.318,0.325,0.335,0.335,0.331,0.327,0.321,0.323,0.320,0.300,0.286,0.293,0.291,0.290,0.288,0.304,0.298,0.295,0.301,0.299,0.296,0.299,0.293,0.296,0.293,0.297,0.322,0.310,0.323,0.407,0.457,0.420,0.388,0.370,0.418,0.399,0.396,0.370,0.380,0.383,0.386,0.409,0.433,0.448,0.444,0.418,0.437,0.429,0.444,0.416,0.397,0.400,0.419,0.420,0.408,0.385,0.402,0.393,0.402,0.399,0.404,0.410,0.427,0.448,0.426,0.434,0.429,0.445,0.474,0.468,0.472,0.465,0.461,0.403,0.423,0.424,0.392,0.404,0.397,0.405,0.387,0.379,0.388,0.398,0.402,0.393,0.360,0.328,0.344,0.331,0.303,0.312,0.294,0.310,0.320,0.319,0.332,0.330,0.320,0.307,0.315,0.312,0.323,0.309,0.311,0.309,0.318,0.319,0.316,0.311,0.315,0.318,0.321,0.310,0.310,0.307,0.295,0.298,0.303,0.300,0.297,0.262,0.263,0.260,0.265,0.283,0.282,0.273,0.265,0.270,0.277,0.271,0.269,0.270,0.269,0.255,0.256,0.254,0.258,0.256,0.261,0.263,0.258,0.256,0.251,0.260,0.262,0.258,0.258,0.255,0.253,0.255,0.262,0.260,0.261,0.285,0.313,0.301,0.293,0.289,0.276,0.270,0.233,0.246,0.242,0.242,0.242,0.240,0.257,0.248,0.253,0.246,0.253,0.253,0.254,0.276,0.277,0.281,0.270,0.267,0.272,0.277,0.297,0.288,0.283,0.301,0.294,0.291,0.294,0.292,0.290,0.273,0.276,0.298,0.294,0.299,0.294,0.302,0.295,0.294,0.292,0.294,0.290,0.299,0.301,0.310,0.290,0.275,0.279,0.279,0.273,0.272,0.271,0.267,0.260,0.261,0.263,0.251,0.253,0.249,0.242,0.230,0.234,0.220,0.217,0.220,0.224,0.223,0.230,0.225,0.225,0.219,0.219,0.214,0.221,0.225,0.227,0.229,0.224,0.222,0.220,0.218,0.220,0.216,0.217,0.205,0.182,0.195,0.187,0.194,0.191,0.195,0.189,0.190,0.188,0.188,0.189,0.192,0.196,0.192,0.192,0.192,0.187,0.193,0.192,0.194,0.223,0.213,0.207,0.203,0.212,0.211,0.214,0.211,0.235,0.233,0.228,0.238,0.242,0.235,0.232,0.236,0.236,0.225,0.222,0.218,0.230,0.230,0.239,0.234,0.243,0.238,0.240,0.251,0.254,0.265,0.277,0.282,0.278,0.277,0.282,0.273,0.282,0.305,0.327,0.336,0.307,0.292,0.286,0.298,0.274,0.271,0.273,0.275,0.284,0.270,0.252,0.228,0.238,0.236,0.228,0.226,0.239,0.234,0.234,0.239,0.245,0.236,0.203,0.209,0.211,0.207,0.140,0.160,0.145,0.152,0.141,0.147,0.148,0.165,0.156,0.158,0.147,0.158,0.162,0.162,0.176,0.172,0.175,0.162,0.171,0.173,0.175,0.178,0.179,0.181,0.179,0.198,0.192,0.202,0.198,0.187,0.189,0.189,0.188,0.186,0.180,0.190,0.188,0.195,0.189,0.181,0.183,0.188,0.192,0.192,0.194,0.196,0.197,0.214,0.226,0.211,0.217,0.223,0.219,0.218,0.217,0.211,0.218,0.218,0.216,0.197,0.193,0.197,0.201,0.204,0.197,0.199,0.201,0.205,0.205,0.201,0.194,0.200,0.198,0.192,0.196,0.193,0.197,0.200,0.197,0.206,0.202,0.211,0.202,0.203,0.204,0.202,0.203,0.203,0.204,0.201,0.202,0.187,0.193,0.192,0.189,0.192,0.192,0.192,0.189,0.187,0.187,0.185,0.189,0.188,0.183,0.181,0.182,0.175,0.176,0.177,0.175,0.176,0.174,0.176,0.178,0.177,0.188,0.185,0.205,0.202,0.198,0.200,0.201,0.198,0.198,0.197,0.194,0.194,0.199,0.199,0.194,0.199,0.203,0.208,0.204,0.214,0.215,0.224,0.230,0.243,0.244,0.259,0.291,0.287,0.310,0.301,0.302,0.303,0.294,0.295,0.288,0.294,0.282,0.282,0.294,0.300,0.299,0.304,0.315,0.302,0.289,0.292,0.278,0.286,0.284,0.288,0.276,0.276,0.264,0.271,0.273,0.282,0.281,0.295,0.276,0.244,0.254,0.237,0.239,0.242,0.236,0.239,0.243,0.242,0.247,0.242,0.245,0.243,0.246,0.252,0.250,0.251,0.246,0.231,0.233,0.221,0.233,0.241,0.241,0.243,0.241,0.242,0.241,0.238,0.234,0.232,0.247,0.250,0.245,0.248,0.251,0.253,0.254,0.255,0.256,0.256,0.249,0.246,0.240,0.240,0.242,0.245,0.243,0.251,0.257,0.254,0.256,0.253,0.248,0.252,0.245,0.242,0.239,0.239,0.239,0.235,0.239,0.237,0.245,0.258,0.249,0.253,0.250,0.254,0.256,0.255,0.266,0.268,0.269,0.288,0.302,0.293,0.304,0.330,0.463,0.446,0.616,0.694,0.631,0.537,0.562,0.626,0.605,0.664,0.611,0.630,0.631,0.553,0.585,0.621,0.608,0.558,0.583,0.572,0.538,0.505,0.512,0.497,0.468,0.571,0.578,0.583,0.577,0.556,0.514,0.445,0.260,0.338,0.317,0.294,0.283,0.247,0.221,0.211,0.219,0.238,0.221,0.225,0.236,0.226,0.249,0.324,0.321,0.325,0.315,0.287,0.292,0.305,0.296,0.280,0.279,0.277,0.285,0.294,0.295,0.267,0.272,0.271,0.273,0.267,0.267,0.251,0.264,0.283,0.443,0.495,0.371,0.372,0.397,0.445,0.452,0.443,0.418,0.451,0.477,0.506,0.528,0.610,0.633,0.593,0.549,0.519,0.534,0.531,0.564,0.514,0.544,0.566,0.476,0.468,0.435,0.428,0.436,0.415,0.445,0.436,0.448,0.481,0.454,0.462,0.465,0.473,0.485,0.462,0.452,0.439,0.457,0.439,0.435,0.460,0.469,0.469,0.466,0.525,0.516,0.544,0.549,0.480,0.511,0.563,0.548,0.545,0.565,0.562,0.570,0.570,0.606,0.579,0.634,0.912,1.095,0.916,1.055,1.018,1.371,1.350,1.467,1.796,1.833,1.758,1.550,1.540,1.411,1.309,1.386,1.290,1.155,1.172,1.052,1.033,1.367,1.403,1.358,1.399,1.600,1.652,1.561,1.555,1.389,1.613,1.602,1.581,1.564,1.535,1.392,1.481,1.267,1.365,1.401,1.487,1.450,1.496,1.593,1.060,1.182,1.007,0.906,0.791,0.995,0.972,1.033,0.971,0.899,0.832,0.906,1.044,1.008,1.024,1.044,0.968,0.923,0.946,0.862,0.876,0.922,0.869,0.847,0.831,0.884,0.890,0.866,0.831,0.841,0.797,0.757,0.773,0.607,0.547,0.638,0.671,0.613,0.616,0.648,0.643,0.705,0.706,0.659,0.657,0.673,0.695,0.652,0.665,0.651,0.621,0.636,0.625,0.635,0.629,0.619,0.620,0.595,0.589,0.581,0.588,0.556,0.528,0.572,0.592,0.609,0.609,0.606,0.624,0.645,0.734,0.749,0.752,0.744,0.724,0.739,0.712,0.730,0.733,0.747,0.816,0.779,0.817,0.851,1.012,0.964,1.089,1.281,1.284,1.185,1.097,1.142,1.234,1.263,1.217,1.226,1.248,1.135,1.175,1.072,1.193,1.145,1.139,1.100,1.187,1.237,1.254,1.292,1.255,1.306,1.390,1.128,1.099,1.087,1.055,1.078,1.118,1.064,1.096,1.121,1.091,1.066,1.075,1.048,0.919,0.871,1.004,1.001,0.944,0.940,0.944,0.921,0.892,0.927,0.951,1.042,1.035,1.054,1.042,1.084,1.077,1.067,1.062,1.159,1.135,1.135,1.101,1.128,1.134,1.140,1.133,1.093,1.083,1.091,1.145,1.088,1.088,1.093,1.081,1.094,1.107,0.995,1.057,1.081,1.085,1.113,1.092,1.134,1.210,1.201,1.159,1.152,1.219,1.282,1.257,1.193,1.215,1.189,1.189,1.188,1.171,1.088,1.096,1.040,1.090,1.096,1.061,1.037,1.067,1.033,1.044,0.940,0.945,0.969,0.991,0.999,0.990,0.972,0.922,0.847,0.805,0.828,0.816,0.863,0.858,0.799,0.838,0.840,0.781,0.811,0.828,0.805,0.796,0.826,0.835,0.878,0.946,0.953,0.994,0.911,0.926,0.920,0.926,0.851,0.816,0.839,0.829,0.850,0.859,0.832,0.822,0.771,0.780,0.763,0.744,0.752,0.740,0.770,0.798,0.767,0.773,0.779,0.778,0.762,0.752,0.738,0.718,0.637,0.596,0.628,0.611,0.617,0.620,0.608,0.611,0.617,0.602,0.617,0.627,0.601,0.610,0.655,0.666,0.684,0.832,0.874,0.870,0.825,0.759,0.822,0.805,0.801,0.849,0.838,0.767,0.784,0.820,0.775,0.702,0.721,0.695,0.696,0.769,0.750,0.721,0.781,0.784,0.768,0.751,0.712,0.754,0.724,0.720,0.720,0.765,0.736,0.802,0.785,0.760,0.774,0.765,0.793,0.794,0.797,0.819,0.804,0.838,0.836,0.837,0.842,0.824,0.832,0.857,0.863,0.858,0.860,0.814,0.827,0.824,0.842,0.826,0.817,0.760,0.787,0.754,0.761,0.754,0.694,0.715,0.723,0.726,0.784,0.780,0.752,0.770,0.775,0.752,0.732,0.717,0.705,0.697,0.693,0.642,0.651,0.642,0.611,0.585,0.608,0.614,0.604,0.645,0.598,0.602,0.580,0.566,0.486,0.513,0.414,0.384,0.421,0.425,0.447,0.421,0.437,0.404,0.420,0.410,0.413,0.421,0.404,0.408,0.405,0.391,0.381,0.385,0.388,0.418,0.420,0.397,0.404,0.389,0.392,0.395,0.402,0.407,0.399,0.399,0.381,0.359,0.342,0.310,0.321,0.343,0.312,0.320,0.307,0.325,0.322,0.328,0.321,0.335,0.366,0.367,0.358,0.353,0.337,0.328,0.332,0.312,0.315,0.321,0.327,0.324,0.332,0.341,0.339,0.345,0.324,0.315,0.311,0.323,0.333,0.333,0.350,0.342,0.365,0.373,0.363,0.366,0.358,0.359,0.358,0.336,0.338,0.359,0.373,0.367,0.387,0.379,0.379,0.371,0.369,0.371,0.376,0.371,0.372,0.378,0.367,0.381,0.380,0.379,0.377,0.375,0.374,0.377,0.378,0.370,0.334,0.337,0.344,0.343,0.346,0.345,0.349,0.338,0.334,0.321,0.333,0.326,0.327,0.332,0.331,0.329,0.331,0.332,0.320,0.336,0.339,0.357,0.357,0.355,0.359,0.332,0.341,0.326,0.355,0.376,0.357,0.384,0.415,0.395,0.484,0.506,0.487,0.491,0.468,0.445,0.449,0.485,0.479,0.475,0.448,0.462,0.479,0.489,0.492,0.519,0.516,0.531,0.493,0.486,0.488,0.479,0.488,0.481,0.476,0.479,0.465,0.450,0.446,0.461,0.465,0.468,0.453,0.460,0.468,0.463,0.474,0.470,0.458,0.464,0.463,0.450,0.455,0.506,0.493,0.471,0.464,0.406,0.331,0.393,0.383,0.363,0.340,0.377,0.388,0.374,0.381,0.382,0.383,0.360,0.364,0.375,0.381,0.401,0.407,0.396,0.396,0.388,0.398,0.407,0.396,0.395,0.387,0.389,0.389,0.391,0.383,0.394,0.388,0.386,0.380,0.387,0.395,0.385,0.378,0.351,0.354,0.350,0.339,0.348,0.344,0.349,0.354,0.352,0.345,0.366,0.367,0.355,0.342,0.345,0.339,0.338,0.348,0.343,0.347,0.337,0.344,0.344,0.344,0.349,0.351,0.372,0.374,0.386,0.394,0.384,0.386,0.387,0.378,0.392,0.413,0.403,0.401,0.423,0.407,0.417,0.409,0.412,0.408,0.413,0.393,0.405,0.413,0.409,0.411,0.410,0.398,0.392,0.403,0.397";
            string temp_Dogecoin = "0.050,0.049,0.050,0.049,0.050,0.051,0.051,0.059,0.057,0.055,0.055,0.055,0.059,0.059,0.057,0.057,0.058,0.057,0.058,0.059,0.057,0.055,0.053,0.053,0.051,0.053,0.054,0.053,0.054,0.054,0.054,0.053,0.059,0.057,0.056,0.057,0.058,0.061,0.059,0.060,0.061,0.063,0.076,0.070,0.091,0.112,0.188,0.351,0.300,0.334,0.383,0.294,0.312,0.266,0.235,0.277,0.243,0.265,0.269,0.305,0.302,0.327,0.364,0.387,0.422,0.548,0.600,0.591,0.650,0.672,0.566,0.454,0.506,0.470,0.394,0.532,0.513,0.486,0.495,0.475,0.345,0.398,0.330,0.342,0.298,0.357,0.336,0.343,0.330,0.311,0.293,0.303,0.321,0.340,0.409,0.401,0.382,0.371,0.371,0.345,0.333,0.338,0.326,0.321,0.314,0.328,0.322,0.318,0.308,0.304,0.290,0.289,0.286,0.209,0.193,0.218,0.254,0.249,0.234,0.240,0.256,0.263,0.250,0.242,0.240,0.246,0.247,0.232,0.230,0.230,0.208,0.219,0.210,0.213,0.205,0.199,0.195,0.186,0.173,0.187,0.181,0.172,0.172,0.187,0.189,0.187,0.193,0.193,0.208,0.200,0.204,0.201,0.204,0.206,0.209,0.201,0.193,0.200,0.199,0.205,0.242,0.240,0.249,0.260,0.277,0.261,0.278,0.285,0.323,0.323,0.307,0.293,0.315,0.322,0.317,0.307,0.317,0.297,0.287,0.270,0.288,0.283,0.282,0.279,0.276,0.285,0.297,0.295,0.299,0.309,0.306,0.251,0.250,0.250,0.238,0.242,0.239,0.237,0.237,0.243,0.233,0.238,0.238,0.235,0.208,0.200,0.224,0.220,0.210,0.207,0.207,0.199,0.198,0.195,0.201,0.216,0.220,0.220,0.237,0.249,0.247,0.244,0.242,0.245,0.238,0.225,0.223,0.228,0.231,0.237,0.236,0.229,0.247,0.241,0.254,0.243,0.247,0.247,0.258,0.264,0.264,0.239,0.299,0.291,0.270,0.271,0.268,0.273,0.267,0.260,0.257,0.259,0.265,0.276,0.274,0.245,0.260,0.257,0.260,0.260,0.257,0.238,0.235,0.222,0.231,0.231,0.228,0.218,0.225,0.216,0.220,0.202,0.204,0.203,0.216,0.214,0.206,0.210,0.199,0.175,0.168,0.176,0.177,0.178,0.171,0.166,0.166,0.169,0.155,0.185,0.180,0.175,0.168,0.171,0.168,0.166,0.170,0.174,0.181,0.189,0.191,0.189,0.188,0.173,0.170,0.170,0.169,0.171,0.172,0.168,0.167,0.158,0.159,0.153,0.150,0.150,0.142,0.151,0.158,0.169,0.188,0.185,0.176,0.165,0.165,0.160,0.154,0.142,0.132,0.136,0.136,0.140,0.140,0.137,0.140,0.141,0.138,0.140,0.141,0.136,0.135,0.144,0.146,0.151,0.167,0.156,0.157,0.151,0.145,0.141,0.152,0.144,0.148,0.148,0.138,0.137,0.139,0.135,0.129,0.129,0.127,0.122,0.124,0.127,0.121,0.128,0.131,0.132,0.127,0.122,0.123,0.120,0.115,0.115,0.119,0.115,0.115,0.114,0.111,0.110,0.111,0.115,0.115,0.117,0.122,0.117,0.117,0.121,0.127,0.135,0.130,0.134,0.141,0.150,0.143,0.142,0.138,0.139,0.139,0.144,0.145,0.164,0.146,0.143,0.144,0.141,0.153,0.136,0.134,0.138,0.141,0.144,0.141,0.140,0.137,0.140,0.140,0.135,0.134,0.134,0.130,0.156,0.140,0.138,0.136,0.134,0.131,0.130,0.129,0.127,0.134,0.128,0.126,0.127,0.124,0.107,0.108,0.079,0.080,0.089,0.086,0.091,0.087,0.089,0.085,0.086,0.083,0.084,0.084,0.084,0.082,0.083,0.078,0.080,0.081,0.081,0.085,0.086,0.079,0.081,0.080,0.081,0.081,0.081,0.081,0.079,0.079,0.075,0.069,0.065,0.055,0.054,0.057,0.055,0.056,0.049,0.062,0.059,0.065,0.061,0.063,0.066,0.067,0.073,0.072,0.067,0.070,0.062,0.066,0.066,0.066,0.067,0.068,0.068,0.070,0.069,0.069,0.067,0.063,0.060,0.059,0.061,0.063,0.063,0.063,0.065,0.068,0.068,0.069,0.067,0.067,0.067,0.064,0.061,0.065,0.069,0.069,0.070,0.070,0.068,0.066,0.067,0.066,0.069,0.068,0.069,0.070,0.068,0.070,0.071,0.071,0.073,0.080,0.076,0.085,0.081,0.077,0.068,0.068,0.069,0.067,0.068,0.068,0.068,0.065,0.062,0.063,0.063,0.061,0.061,0.061,0.061,0.061,0.062,0.061,0.058,0.061,0.060,0.063,0.063,0.063,0.063,0.060,0.060,0.059,0.059,0.061,0.059,0.058,0.058,0.057,0.058,0.062,0.064,0.061,0.060,0.060,0.060,0.060,0.060,0.060,0.059,0.060,0.065,0.064,0.063,0.061,0.061,0.062,0.060,0.059,0.059,0.059,0.058,0.058,0.058,0.059,0.059,0.059,0.059,0.059,0.059,0.059,0.059,0.062,0.071,0.079,0.084,0.128,0.117,0.124,0.139,0.125,0.128,0.126,0.127,0.118,0.113,0.088,0.071,0.089,0.082,0.091,0.083,0.085,0.086,0.084,0.084,0.083,0.084,0.076,0.073,0.077,0.080,0.080,0.088,0.090,0.104,0.095,0.101,0.105,0.100,0.099,0.101,0.103,0.101,0.099,0.095,0.098,0.095,0.096,0.094,0.089,0.091,0.088,0.084,0.080,0.077,0.078,0.072,0.074,0.073,0.076,0.076,0.077,0.075,0.074,0.073,0.070,0.069,0.068,0.070,0.070,0.072,0.069,0.071,0.072,0.072,0.072,0.072,0.075,0.076,0.076,0.079,0.082,0.086,0.085,0.083,0.083,0.080,0.081,0.085,0.087,0.087,0.088,0.086,0.087,0.085,0.087,0.087,0.089,0.086,0.094,0.094,0.090,0.092,0.096,0.091,0.091,0.091,0.089,0.081,0.080,0.082,0.082,0.081,0.083,0.088,0.086,0.087,0.088";
            string temp_Solana = "247.330,241.640,228.190,236.450,229.850,239.420,236.010,237.270,222.800,217.100,195.840,214.570,218.120,233.420,217.720,223.560,206.790,208.430,195.900,194.260,198.390,206.900,212.770,224.660,241.870,214.990,201.230,190.620,192.650,191.740,191.600,182.570,173.520,169.520,173.360,153.210,160.470,178.990,182.690,177.370,184.040,179.760,173.890,180.180,181.580,188.930,192.480,192.740,198.460,198.180,178.650,173.510,173.080,170.660,176.320,175.630,168.980,168.990,153.400,151.040,139.540,144.370,142.180,135.160,140.930,151.850,148.960,146.990,147.990,146.740,138.140,140.530,135.750,132.190,113.060,95.960,95.700,93.190,92.860,90.060,86.990,92.170,96.160,92.550,99.370,111.690,100.380,100.670,110.930,114.050,112.890,117.980,112.800,114.590,108.080,97.440,95.200,93.020,95.430,101.250,102.310,94.140,90.220,90.050,91.080,84.670,85.350,86.510,89.760,91.680,91.770,85.160,97.610,97.480,101.400,95.130,88.760,89.360,85.690,81.180,81.630,86.910,82.850,81.210,81.760,79.630,79.390,83.620,86.390,89.470,89.830,92.540,88.660,88.530,91.770,93.440,102.320,99.230,102.340,104.780,112.690,112.660,120.850,124.270,135.050,136.820,135.660,130.660,130.010,118.400,118.350,113.200,109.620,114.560,101.140,101.950,104.990,100.140,101.050,102.090,103.190,101.360,108.260,107.060,102.470,101.580,102.290,99.910,100.150,96.720,98.030,98.400,93.660,90.680,89.220,86.440,85.840,91.920,85.060,82.300,80.850,75.850,66.480,65.620,44.040,44.210,50.340,49.780,56.700,54.860,55.230,51.020,52.030,50.060,49.950,51.820,50.820,49.350,48.610,44.070,41.870,44.160,44.310,47.240,45.780,40.590,40.420,38.270,37.780,39.660,42.090,40.460,38.840,40.020,37.800,33.800,31.910,28.620,29.030,31.710,31.050,31.560,27.750,34.770,34.980,36.160,34.110,37.610,41.020,40.460,41.190,38.670,36.280,34.230,31.600,33.180,32.950,33.350,35.040,35.760,36.260,38.440,38.750,38.210,37.140,34.970,33.080,33.530,36.770,37.720,39.320,39.040,40.020,45.420,42.160,43.220,40.460,39.590,40.970,38.740,35.450,39.510,43.800,42.220,45.190,43.680,41.400,41.360,39.550,38.330,40.260,40.620,41.220,43.100,40.260,42.170,43.270,44.790,46.720,45.180,43.900,43.410,40.840,41.100,36.790,34.340,36.330,34.740,35.380,35.940,35.890,32.930,31.390,31.680,31.910,31.770,32.130,31.380,31.110,30.980,31.930,31.910,31.160,32.630,33.510,34.780,34.730,35.090,37.750,33.860,33.360,33.630,32.280,33.370,32.240,32.700,31.680,31.510,32.290,32.520,33.900,32.470,33.350,32.610,33.470,34.000,33.270,32.550,32.710,33.160,34.180,33.700,33.670,32.980,32.740,32.930,32.450,31.200,31.150,30.580,30.160,29.750,30.320,30.860,30.270,29.600,28.180,28.190,28.020,28.820,28.480,30.960,31.270,30.990,32.320,32.980,32.500,32.530,32.350,30.280,31.230,33.550,36.730,33.760,30.990,23.570,12.390,18.000,15.770,14.890,13.540,13.880,14.250,14.110,13.620,13.180,12.790,12.200,11.530,11.940,14.090,14.400,14.130,14.190,14.370,13.330,13.380,13.840,13.450,13.700,13.440,13.590,13.950,14.070,13.510,13.610,13.510,13.580,13.590,13.280,13.740,14.290,14.020,12.870,12.260,12.380,11.990,12.240,12.030,11.810,11.810,11.340,11.380,11.180,10.960,9.560,8.340,9.790,9.980,9.950,11.330,13.210,13.080,13.480,13.210,13.120,13.670,16.270,16.350,15.840,16.390,18.230,22.670,23.250,23.570,23.220,21.260,21.250,24.170,25.530,24.140,24.250,23.880,24.840,24.380,24.290,23.850,26.300,23.730,23.770,24.730,24.160,24.430,24.580,23.340,22.970,23.510,23.070,21.210,20.140,20.590,21.320,20.250,21.690,23.460,22.900,23.100,23.480";
            string temp_Monero = "41.181,41.794,42.195,42.476,42.290,42.952,46.983,47.522,47.643,47.193,48.060,48.362,46.189,46.720,46.060,46.420,50.626,51.914,50.491,48.923,50.371,53.017,47.854,47.871,47.659,47.633,47.677,48.277,48.337,48.182,46.961,48.688,49.245,49.840,48.971,48.960,49.045,48.818,49.263,49.787,49.895,51.364,52.710,52.205,51.525,52.482,53.793,51.920,52.652,52.040,51.930,50.165,50.783,52.935,52.358,52.656,53.503,55.757,58.547,65.987,72.331,62.261,68.133,67.423,68.356,69.553,68.448,69.591,65.041,65.391,64.580,65.904,64.488,67.939,67.226,69.770,68.324,68.862,67.887,67.991,69.287,66.253,67.182,60.453,61.583,60.098,60.227,61.181,63.803,63.237,66.495,66.240,66.438,67.293,66.030,66.781,63.715,67.337,77.468,76.968,81.090,80.377,91.909,84.726,78.441,79.262,87.144,87.796,89.281,87.344,84.548,86.811,86.482,91.019,97.050,95.752,95.079,92.935,92.527,92.277,94.097,93.673,82.381,83.836,84.099,86.822,87.927,83.957,86.062,86.812,88.610,90.967,87.476,93.727,95.072,98.214,96.352,100.202,105.192,107.558,113.664,118.589,116.687,112.492,105.361,94.354,98.741,99.541,93.215,87.757,85.571,87.204,90.588,90.786,96.918,102.786,102.542,97.610,92.992,89.401,96.592,89.996,88.071,88.325,75.193,77.016,84.410,82.561,86.243,84.215,83.467,83.461,79.421,80.487,79.849,77.743,79.393,78.205,78.397,79.975,82.164,82.776,87.347,88.269,92.837,91.180,95.789,91.011,93.166,90.426,91.291,91.078,85.408,78.740,81.764,80.966,80.743,83.801,86.063,84.442,80.763,82.161,82.648,78.848,79.102,79.000,77.822,71.964,68.679,67.820,66.103,69.343,73.675,74.993,72.801,75.438,75.556,78.175,76.440,74.371,71.720,72.463,74.399,73.948,75.462,74.878,73.889,75.248,78.073,75.612,72.592,72.339,72.258,69.331,59.288,59.850,57.321,56.609,57.091,55.187,55.781,55.697,54.798,55.153,57.100,56.046,54.668,55.869,55.071,56.783,55.593,54.554,53.749,52.399,52.584,51.609,54.389,56.626,56.462,53.498,56.050,57.939,57.194,52.762,53.623,58.864,56.209,60.070,59.850,59.144,58.240,58.603,60.113,61.562,63.097,63.045,62.821,63.937,62.998,60.928,61.648,63.842,61.809,62.031,64.957,64.749,61.504,61.376,61.898,58.645,58.433,57.672,53.172,51.378,51.194,48.373,50.175,50.972,54.929,54.270,55.023,54.049,53.085,54.158,53.382,52.200,53.823,53.849,53.973,53.772,53.566,52.732,52.782,52.867,52.172,51.003,50.611,48.900,44.765,47.197,47.220,46.340,44.947,47.232,46.774,45.619,45.744,44.942,44.704,45.553,46.266,45.482,44.621,45.600,44.587,50.073,50.037,53.610,56.712,57.644,58.181,58.203,57.614,58.565,58.422,57.309,62.166,66.164,65.178,67.562,67.397,64.549,65.531,65.411,64.398,61.503,62.206,61.843,63.626,65.764,65.866,69.925,72.740,71.625,72.966,77.372,76.823,74.683,77.881,77.921,78.408,80.474,85.940,84.511,88.627,94.169,92.503,94.590,89.547,84.507,82.204,86.545,78.167,76.274,79.527,79.737,84.289,77.442,76.599,69.206,69.305,68.269,66.457,64.012,68.716,65.352,65.291,69.009,68.605,65.261,60.060,54.121,55.168,53.923,37.219,35.212,36.281,35.855,32.000,36.093,36.176,40.870,37.932,41.676,38.363,42.820,46.938,45.937,49.330,50.650,47.483,44.674,46.975,47.661,47.419,50.025,52.449,53.920,53.348,57.900,55.041,57.121,58.577,53.934,52.537,55.213,52.823,53.602,54.836,56.669,56.915,58.433,57.555,55.127,55.310,56.693,60.048,60.503,61.001,61.249,61.544,62.339,66.847,62.443,63.330,64.502,62.277,60.502,60.373,59.050,63.354,64.023,63.421,58.420,59.092,61.157,65.252,64.949,62.529,64.697,65.291,66.332,66.524,64.667,61.443,63.034,64.745,62.399,61.750,61.881,64.523,66.169,66.370,66.712,67.375,66.436,66.300,66.712,67.508,67.687,67.718,66.106,67.463,68.163,69.140,65.016,65.546,65.697,65.636,64.590,65.625,65.493,64.780,64.114,63.724,64.439,66.050,66.740,64.501,64.540,64.208,60.917,62.766,64.393,63.672,64.124,65.985,62.982,64.028,62.322,64.685,64.191,66.134,67.174,67.318,67.969,68.389,69.321,68.218,70.164,66.467,67.120,68.067,68.716,69.131,69.687,69.954,73.071,72.235,73.462,76.740,77.433,82.399,81.085,81.704,83.373,89.175,85.272,88.820,86.209,89.180,94.175,93.250,94.258,92.715,92.677,84.714,88.618,88.842,90.200,90.158,90.218,94.338,92.908,91.348,98.588,94.198,92.978,90.338,93.028,86.548,88.938,87.398,93.698,93.388,95.468,93.478,95.998,90.578,83.258,82.778,75.748,79.948,79.998,81.078,84.908,84.898,83.438,86.308,86.248,89.888,90.938,87.358,92.688,91.858,94.118,91.338,89.268,93.198,87.268,90.988,93.108,93.958,97.838,97.438,98.818,105.208,102.488,100.578,102.948,106.218,108.178,105.198,109.968,111.088,116.448,116.728,122.638,132.608,127.311,127.826,130.287,120.038,119.937,121.899,127.311,119.478,124.211,127.576,126.098,128.779,131.111,131.425,132.344,125.044,124.233,123.094,127.455,125.471,120.200,118.806,114.768,118.082,118.536,111.121,118.451,117.089,116.214,113.804,110.578,113.136,116.025,114.247,116.900,124.260,122.350,117.895,121.031,127.468,125.531,130.515,134.649,131.517,117.253,115.058,120.405,122.364,127.618,126.066,126.676,130.997,129.494,131.855,130.814,138.175,136.657,132.607,133.646,138.546,147.694,146.792,152.505,150.867,153.239,159.620,155.667,155.559,152.765,146.158,154.187,155.978,150.433,156.833,165.879,158.320,165.689,160.585,159.978,156.186,132.295,139.990,137.899,129.514,137.094,136.698,146.768,138.285,145.882,175.086,159.930,159.314,167.725,161.535,154.082,153.336,160.575,154.178,160.459,151.068,134.762,137.274,138.686,135.744,137.993,135.500,128.199,133.753,139.064,139.829,134.437,144.387,148.744,151.516,150.592,152.618,153.502,148.610,159.689,167.719,173.319,182.972,203.322,235.544,235.675,219.397,213.976,263.814,255.070,275.248,255.372,243.818,223.870,207.719,200.673,197.818,196.925,209.236,215.765,220.100,213.840,221.737,210.866,207.520,200.798,206.263,217.871,222.520,221.093,219.155,220.827,232.723,232.301,217.395,226.714,233.465,228.975,231.060,233.158,235.626,222.289,220.249,216.466,217.329,217.877,221.447,228.315,231.004,242.685,243.920,246.257,253.711,254.749,259.966,263.182,267.884,261.524,268.963,276.022,282.238,322.058,316.886,327.635,315.907,345.413,342.138,368.624,320.173,363.858,385.118,388.069,355.752,335.922,387.475,342.113,387.330,390.360,413.760,401.084,412.697,425.193,409.761,406.796,396.881,403.995,418.982,475.709,461.082,467.474,442.708,445.724,436.141,385.388,398.498,390.946,369.529,348.080,339.100,219.498,273.748,239.183,230.495,210.872,246.767,228.488,259.146,245.439,247.850,229.938,259.754,257.982,258.470,284.112,304.767,284.441,270.619,269.723,262.036,247.522,265.021,257.122,246.234,244.891,258.390,268.315,276.583,262.844,271.206,260.981,280.128,263.303,224.529,208.144,211.351,217.633,198.942,192.924,196.584,213.971,215.751,218.601,204.896,203.899,213.957,219.743,216.474,216.283,219.462,204.793,211.450,207.295,209.261,202.910,200.145,198.723,194.857,193.578,196.168,197.343,187.720,185.885,192.710,196.636,197.109,203.397,211.004,218.549,221.598,231.769,243.133,238.808,239.748,244.583,229.197,224.301,235.893,251.334,257.575,266.459,258.964,262.995,262.517,273.713,256.395,267.091,266.773,269.047,270.291,259.320,248.078,260.020,280.657,281.706,289.312,316.270,311.383,307.253,292.647,312.078,299.673,291.696,292.787,285.990,299.730,301.611,305.631,302.308,312.003,314.918,259.289,256.921,257.077,248.776,250.097,245.917,265.144,264.808,268.999,258.848,257.319,265.912,264.645,231.197,217.360,238.731,246.806,233.730,236.699,232.147,234.882,230.998,229.199,250.958,257.487,255.577,256.782,264.888,269.566,285.656,277.881,277.283,276.857,276.606,266.369,276.748,272.638,265.780,276.725,266.731,252.534,254.441,251.981,261.962,267.184,266.125,264.312,284.764,284.346,291.220,260.064,266.299,266.765,263.358,270.972,269.149,273.251,266.148,260.378,253.721,256.824,264.992,272.697,288.014,261.853,267.991,260.376,272.200,270.092,266.747,243.826,239.383,226.635,235.182,244.579,249.938,231.480,236.344,244.303,247.869,223.323,226.938,237.705,235.162,237.827,229.454,237.782,222.381,196.808,196.811,199.557,204.790,210.054,190.451,192.556,196.269,198.339,185.485,186.624,188.444,190.340,182.780,180.969,182.810,190.113,188.680,191.271,209.537,204.272,212.886,214.504,226.214,206.502,212.735,223.990,228.767,249.619,235.542,225.472,223.182,206.472,199.197,194.192,183.979,190.778,181.663,188.402,196.904,226.650,228.737,216.776,226.560,211.621,204.362,201.239,191.409,170.842,151.632,148.411,145.311,143.539,143.729,140.014,145.976,154.262,145.583,144.575,144.903,144.471,145.532,160.246,169.257,170.120,183.080,176.286,182.019,180.847,168.017,171.678,171.786,174.092,178.825,180.687,164.558,159.776,164.395,151.475,147.615,147.246,150.094,147.360,151.135,158.300,149.754,165.330,176.819,178.863,170.536,159.315,161.276,161.013,155.285,168.848,185.681,170.352,169.778,181.457,180.240,180.807,184.029,188.122,186.491,191.991,195.674,195.867,191.633,194.798,194.524,200.767,200.312,205.912,212.123,218.054,218.496,220.887,212.597,215.940,214.764,213.981,222.746,219.500,217.427,222.393,219.772,234.773,240.378,223.361,233.648,232.612,225.743,236.442,234.913,236.636,252.240,253.585,266.668,282.001,265.053,268.975,251.381,257.419,238.757,223.912,223.640,219.768,224.607,211.082,196.835,210.513,218.535,205.087,211.823,205.227,216.425,184.383,157.614,140.342,131.043,140.204,143.341,166.792,163.844,169.465,157.529,162.478,174.334,177.205,178.682,186.430,190.786,198.786,188.671,180.830,175.596,183.481,204.303,194.705,195.337,199.101,195.097,191.860,186.467,187.906,191.831,184.310,182.743,175.980,164.248,161.770,140.527,118.070,113.189,107.023,111.864,98.474,113.008,114.366,118.280,110.586,119.168,126.013,123.587,131.380,119.992,116.957,119.508,107.691,112.109,114.705,115.684,119.034,122.044,124.296,128.994,128.145,125.354,124.056,126.872,122.753,119.618,132.878,137.366,138.310,136.108,139.583,145.504,147.151,150.127,148.025,144.415,149.523,146.872,147.036,159.892,164.131,161.000,157.496,156.482,156.847,156.697,156.527,156.647,158.644,160.471,167.071,166.952,156.597,167.086,157.910,165.624,166.969,165.037,163.165,170.244,168.592,162.526,144.992,146.036,154.942,151.797,153.899,152.850,154.164,145.512,143.416,147.649,151.044,149.017,149.397,152.152,151.239,153.515,153.292,155.569,145.219,149.847,150.516,156.058,156.318,154.660,161.465,148.414,148.694,144.316,146.907,147.631,144.835,139.608,140.991,137.121,139.882,139.792,141.640,140.347,143.796,142.608,146.258,147.296,145.304,142.518,139.653,139.982,145.479,144.620,147.805,143.677,145.439,145.569,143.821,142.478,142.688,142.563,139.243,138.604,141.834,143.247,145.344,145.369,140.816,140.082,141.555,141.085,141.849,142.858,145.818,145.429,146.572,147.446,147.496,145.873,149.468,145.168,148.338,154.534,157.804,157.245,154.754,137.035,115.842,133.246,125.678,126.641,127.500,127.894,127.709,130.825,131.968,131.758,133.181,128.413,126.012,131.272,133.792,136.352,135.952,137.892,137.222,134.912,137.662,141.702,142.942,143.882,145.682,144.372,143.882,142.722,143.022,147.812,147.902,149.632,150.092,151.172,150.962,149.162,148.382,144.692,142.572,144.952,144.282,146.262,147.082,145.822,143.142,143.022,144.842,146.212,144.732,145.512,144.782,145.712,147.732,148.042,148.292,148.142,149.612,154.402,156.192,155.302,154.922,158.772,160.812,163.422,169.082,169.042,175.732,176.052,167.562,171.892,163.012,161.832,171.902,173.922,175.492,178.382,172.212,174.982,172.362,179.112,184.282,185.462,175.472,175.502,177.052,172.262,170.442,172.302,166.162,165.702,166.762,164.992,153.322,152.362,160.512,158.712,154.602,157.452,163.352,158.882,158.522,161.622";
            string temp_Cardano = "0.038,0.037,0.037,0.037,0.036,0.036,0.039,0.040,0.041,0.040,0.040,0.040,0.040,0.039,0.040,0.040,0.045,0.046,0.046,0.044,0.045,0.048,0.042,0.043,0.042,0.041,0.042,0.043,0.042,0.041,0.039,0.042,0.042,0.042,0.042,0.045,0.045,0.047,0.046,0.045,0.047,0.049,0.050,0.049,0.049,0.051,0.052,0.052,0.056,0.062,0.059,0.056,0.059,0.066,0.065,0.070,0.069,0.069,0.071,0.082,0.099,0.083,0.089,0.090,0.089,0.086,0.084,0.087,0.082,0.082,0.082,0.081,0.080,0.082,0.082,0.082,0.078,0.075,0.072,0.076,0.074,0.071,0.075,0.065,0.069,0.066,0.063,0.066,0.067,0.067,0.068,0.066,0.066,0.066,0.064,0.063,0.060,0.062,0.075,0.070,0.074,0.077,0.088,0.084,0.078,0.078,0.084,0.085,0.085,0.079,0.078,0.082,0.079,0.084,0.088,0.091,0.091,0.086,0.086,0.089,0.093,0.094,0.080,0.081,0.079,0.083,0.082,0.078,0.083,0.087,0.093,0.089,0.087,0.090,0.090,0.092,0.088,0.089,0.085,0.089,0.094,0.097,0.094,0.094,0.097,0.084,0.087,0.088,0.084,0.081,0.078,0.079,0.078,0.076,0.078,0.078,0.079,0.077,0.071,0.063,0.067,0.064,0.061,0.058,0.052,0.055,0.058,0.058,0.064,0.060,0.059,0.057,0.056,0.058,0.061,0.059,0.058,0.060,0.059,0.059,0.058,0.057,0.057,0.056,0.056,0.053,0.051,0.051,0.047,0.051,0.055,0.052,0.051,0.047,0.047,0.045,0.046,0.050,0.049,0.048,0.047,0.049,0.049,0.049,0.048,0.049,0.048,0.045,0.044,0.044,0.043,0.044,0.045,0.046,0.045,0.044,0.043,0.046,0.046,0.046,0.045,0.044,0.045,0.045,0.046,0.046,0.046,0.049,0.052,0.051,0.050,0.051,0.048,0.047,0.037,0.039,0.036,0.038,0.038,0.037,0.038,0.038,0.038,0.037,0.039,0.039,0.038,0.040,0.040,0.042,0.041,0.040,0.040,0.040,0.041,0.039,0.038,0.038,0.037,0.038,0.038,0.038,0.038,0.036,0.036,0.041,0.039,0.042,0.042,0.042,0.041,0.040,0.041,0.042,0.041,0.042,0.044,0.044,0.043,0.042,0.041,0.043,0.043,0.043,0.042,0.042,0.043,0.043,0.045,0.043,0.042,0.040,0.038,0.037,0.037,0.035,0.036,0.036,0.038,0.039,0.040,0.040,0.039,0.037,0.037,0.037,0.037,0.037,0.038,0.038,0.037,0.036,0.036,0.036,0.036,0.036,0.036,0.034,0.031,0.033,0.033,0.033,0.032,0.033,0.032,0.033,0.033,0.034,0.032,0.033,0.034,0.033,0.032,0.033,0.032,0.033,0.034,0.034,0.036,0.036,0.036,0.035,0.036,0.036,0.037,0.036,0.040,0.042,0.040,0.045,0.044,0.042,0.043,0.045,0.045,0.043,0.044,0.043,0.044,0.047,0.052,0.055,0.056,0.053,0.055,0.057,0.056,0.055,0.059,0.059,0.059,0.060,0.060,0.059,0.062,0.068,0.067,0.069,0.064,0.059,0.058,0.061,0.058,0.057,0.057,0.058,0.060,0.057,0.056,0.048,0.049,0.048,0.047,0.045,0.049,0.048,0.048,0.051,0.051,0.048,0.044,0.040,0.041,0.038,0.027,0.026,0.026,0.025,0.023,0.025,0.025,0.030,0.028,0.030,0.026,0.028,0.029,0.029,0.029,0.030,0.029,0.028,0.030,0.030,0.029,0.031,0.032,0.032,0.031,0.034,0.034,0.036,0.036,0.033,0.032,0.034,0.032,0.032,0.032,0.034,0.034,0.036,0.035,0.034,0.034,0.036,0.041,0.042,0.042,0.045,0.044,0.046,0.051,0.049,0.050,0.050,0.048,0.049,0.049,0.049,0.050,0.052,0.051,0.046,0.047,0.050,0.051,0.050,0.049,0.050,0.051,0.054,0.056,0.056,0.052,0.056,0.055,0.053,0.053,0.053,0.054,0.062,0.064,0.073,0.078,0.079,0.077,0.082,0.087,0.084,0.085,0.085,0.085,0.083,0.081,0.075,0.078,0.077,0.076,0.079,0.077,0.080,0.080,0.080,0.078,0.078,0.082,0.082,0.081,0.081,0.080,0.075,0.080,0.083,0.083,0.091,0.093,0.098,0.098,0.095,0.100,0.113,0.129,0.122,0.117,0.122,0.121,0.128,0.130,0.128,0.123,0.122,0.122,0.122,0.118,0.121,0.121,0.123,0.122,0.136,0.144,0.142,0.147,0.144,0.140,0.138,0.142,0.134,0.137,0.143,0.143,0.143,0.138,0.141,0.144,0.143,0.133,0.133,0.135,0.138,0.137,0.136,0.141,0.136,0.128,0.131,0.124,0.124,0.121,0.123,0.109,0.115,0.104,0.108,0.114,0.115,0.123,0.124,0.114,0.103,0.101,0.088,0.092,0.090,0.089,0.093,0.096,0.095,0.096,0.093,0.095,0.093,0.090,0.093,0.090,0.091,0.088,0.079,0.081,0.076,0.081,0.096,0.093,0.099,0.103,0.098,0.098,0.096,0.093,0.092,0.096,0.096,0.090,0.092,0.095,0.099,0.107,0.105,0.109,0.108,0.106,0.106,0.102,0.104,0.105,0.109,0.102,0.106,0.110,0.106,0.107,0.106,0.101,0.102,0.097,0.096,0.093,0.092,0.097,0.092,0.092,0.094,0.096,0.107,0.101,0.105,0.105,0.105,0.106,0.103,0.105,0.103,0.100,0.103,0.109,0.105,0.105,0.113,0.128,0.148,0.151,0.160,0.159,0.133,0.135,0.162,0.162,0.165,0.154,0.155,0.161,0.150,0.157,0.157,0.151,0.143,0.148,0.141,0.141,0.144,0.153,0.154,0.154,0.165,0.163,0.163,0.166,0.162,0.153,0.153,0.141,0.151,0.154,0.159,0.153,0.171,0.183,0.182,0.179,0.173,0.175,0.198,0.210,0.253,0.303,0.307,0.284,0.329,0.302,0.254,0.285,0.304,0.298,0.297,0.343,0.378,0.364,0.369,0.359,0.324,0.343,0.345,0.345,0.343,0.338,0.314,0.341,0.345,0.360,0.338,0.378,0.423,0.438,0.431,0.532,0.651,0.632,0.682,0.686,0.897,0.910,0.910,0.876,0.865,0.827,0.855,0.880,0.910,0.928,1.135,1.070,1.101,0.921,1.002,1.094,1.215,1.342,1.323,1.310,1.182,1.226,1.085,1.183,1.110,1.121,1.115,1.174,1.146,1.110,1.040,1.104,1.077,1.038,1.192,1.331,1.260,1.310,1.227,1.193,1.099,1.107,1.106,1.113,1.208,1.192,1.170,1.201,1.214,1.187,1.185,1.186,1.180,1.177,1.190,1.236,1.183,1.203,1.204,1.197,1.268,1.308,1.408,1.428,1.470,1.435,1.392,1.275,1.234,1.258,1.238,1.177,1.129,1.127,1.062,1.212,1.296,1.313,1.294,1.343,1.336,1.341,1.348,1.306,1.447,1.605,1.647,1.608,1.793,1.635,1.731,1.735,1.907,1.939,2.277,2.018,2.104,2.006,1.498,1.791,1.403,1.470,1.255,1.537,1.504,1.735,1.640,1.498,1.356,1.616,1.660,1.712,1.755,1.820,1.739,1.670,1.669,1.624,1.576,1.572,1.532,1.445,1.468,1.574,1.541,1.542,1.504,1.461,1.395,1.411,1.454,1.271,1.188,1.207,1.357,1.282,1.213,1.251,1.331,1.373,1.366,1.326,1.347,1.418,1.459,1.407,1.396,1.412,1.346,1.336,1.321,1.331,1.299,1.258,1.262,1.227,1.178,1.178,1.176,1.121,1.075,1.153,1.181,1.165,1.217,1.204,1.274,1.250,1.269,1.285,1.293,1.304,1.349,1.297,1.368,1.382,1.383,1.401,1.445,1.414,1.456,1.602,1.842,1.759,2.043,2.160,2.176,2.086,2.015,2.035,2.358,2.473,2.394,2.563,2.907,2.815,2.712,2.527,2.867,2.825,2.882,2.808,2.751,2.826,2.964,2.958,2.857,2.941,2.833,2.395,2.384,2.485,2.349,2.705,2.552,2.424,2.382,2.470,2.380,2.327,2.360,2.320,2.075,1.981,2.239,2.244,2.279,2.344,2.259,2.154,2.064,2.035,2.093,2.241,2.286,2.254,2.177,2.230,2.214,2.291,2.226,2.261,2.219,2.125,2.133,2.150,2.162,2.229,2.182,2.112,2.127,2.089,2.179,2.149,2.154,2.144,2.118,2.140,2.187,1.935,2.000,2.002,1.968,1.952,1.933,1.959,2.083,1.979,1.960,1.983,2.015,2.102,2.275,2.040,2.095,2.051,2.043,2.031,2.021,1.892,1.862,1.798,1.858,1.915,1.871,1.776,1.761,1.643,1.678,1.551,1.548,1.576,1.611,1.563,1.546,1.709,1.571,1.406,1.357,1.384,1.384,1.403,1.304,1.247,1.346,1.355,1.226,1.267,1.312,1.266,1.229,1.245,1.241,1.240,1.279,1.342,1.466,1.411,1.448,1.454,1.526,1.400,1.354,1.346,1.310,1.358,1.360,1.321,1.317,1.241,1.269,1.221,1.184,1.179,1.133,1.184,1.293,1.247,1.296,1.304,1.393,1.524,1.468,1.327,1.281,1.137,1.086,1.063,1.073,1.023,1.033,1.029,1.043,1.062,1.032,1.045,1.077,1.030,1.055,1.107,1.123,1.125,1.186,1.166,1.203,1.161,1.090,1.046,1.039,1.038,1.089,1.084,1.024,0.996,0.986,0.934,0.880,0.873,0.885,0.864,0.879,0.900,0.844,0.928,0.955,0.944,0.894,0.840,0.862,0.840,0.795,0.790,0.840,0.805,0.792,0.792,0.798,0.791,0.803,0.829,0.832,0.852,0.905,0.874,0.901,0.965,1.062,1.166,1.103,1.131,1.151,1.230,1.189,1.199,1.154,1.167,1.157,1.176,1.195,1.187,1.096,1.084,1.048,1.026,1.060,0.942,0.934,0.966,0.930,0.952,0.941,0.940,0.927,0.941,0.938,0.917,0.907,0.897,0.883,0.890,0.829,0.836,0.841,0.801,0.779,0.781,0.773,0.765,0.868,0.800,0.786,0.773,0.751,0.635,0.636,0.501,0.469,0.540,0.514,0.584,0.559,0.562,0.522,0.528,0.512,0.524,0.534,0.525,0.512,0.516,0.479,0.457,0.463,0.474,0.549,0.601,0.546,0.580,0.564,0.559,0.571,0.599,0.630,0.638,0.634,0.578,0.552,0.512,0.477,0.469,0.508,0.483,0.487,0.432,0.482,0.491,0.478,0.458,0.473,0.499,0.487,0.504,0.485,0.473,0.466,0.437,0.448,0.453,0.454,0.456,0.455,0.458,0.474,0.467,0.478,0.464,0.443,0.425,0.418,0.438,0.442,0.450,0.443,0.472,0.517,0.490,0.496,0.476,0.494,0.514,0.492,0.456,0.501,0.517,0.525,0.530,0.530,0.508,0.498,0.507,0.496,0.509,0.514,0.529,0.538,0.511,0.532,0.532,0.536,0.561,0.568,0.555,0.566,0.541,0.530,0.458,0.440,0.465,0.453,0.460,0.465,0.472,0.444,0.445,0.442,0.448,0.453,0.455,0.456,0.454,0.480,0.496,0.493,0.463,0.476,0.477,0.493,0.507,0.506,0.507,0.468,0.477,0.467,0.464,0.482,0.460,0.450,0.439,0.444,0.458,0.454,0.458,0.443,0.441,0.439,0.437,0.433,0.427,0.427,0.425,0.425,0.434,0.426,0.427,0.422,0.420,0.420,0.409,0.390,0.383,0.377,0.363,0.363,0.368,0.368,0.361,0.355,0.337,0.346,0.350,0.351,0.358,0.404,0.401,0.390,0.401,0.419,0.406,0.402,0.398,0.383,0.393,0.424,0.427,0.417,0.407,0.371,0.312,0.368,0.350,0.341,0.327,0.325,0.335,0.328,0.323,0.324,0.327,0.310,0.300,0.309,0.315,0.313,0.313,0.314,0.318,0.306,0.309,0.320,0.314,0.318,0.321,0.323,0.319,0.315,0.308,0.314,0.310,0.312,0.308,0.307,0.311,0.307,0.299,0.281,0.264,0.266,0.255,0.258,0.251,0.255,0.259,0.258,0.258,0.262,0.258,0.248,0.240,0.244,0.247,0.248,0.255,0.251,0.264,0.269,0.275,0.275,0.290,0.313,0.322,0.314,0.329,0.347,0.348,0.349,0.350,0.350,0.328,0.336,0.360,0.374,0.374,0.375,0.371,0.375,0.379,0.385,0.382,0.394,0.369,0.386,0.395,0.393,0.402,0.402,0.387,0.387,0.395,0.393,0.365,0.358,0.367,0.363,0.356,0.385,0.401,0.397,0.402,0.404";

            string[] arrBitcoin = temp_Bitcoin.Split(",".ToArray());
            string[] arrEthereum = temp_Ethereum.Split(",".ToArray());
            string[] arrLitecoin = temp_Litecoin.Split(",".ToArray());
            string[] arrRipple = temp_Ripple.Split(",".ToArray());
            string[] arrDogecoin = temp_Dogecoin.Split(",".ToArray());
            string[] arrSolana = temp_Solana.Split(",".ToArray());
            string[] arrMonero = temp_Monero.Split(",".ToArray());
            string[] arrCardano = temp_Cardano.Split(",".ToArray());

            string[] copy_Bitcoin = new string[1500];
            arrBitcoin.CopyTo(copy_Bitcoin, 0);

            string[] copy_Ethereum = new string[1500];
            arrEthereum.CopyTo(copy_Ethereum, 0);

            string[] copy_Litecoin = new string[1500];
            arrLitecoin.CopyTo(copy_Litecoin, 0);

            string[] copy_Ripple = new string[1500];
            arrRipple.CopyTo(copy_Ripple, 0);

            string[] copy_Dogecoin = new string[1500];
            arrDogecoin.CopyTo(copy_Dogecoin, 0);

            string[] copy_Solana = new string[1500];
            arrSolana.CopyTo(copy_Solana, 0);

            string[] copy_Monero = new string[1500];
            arrMonero.CopyTo(copy_Monero, 0);

            string[] copy_Cardano = new string[1500];
            arrCardano.CopyTo(copy_Cardano, 0);

            for (int c = 0; c< copy_Bitcoin.Length; c++) {

                int i = Array.IndexOf(copy_Bitcoin, null);
                if (i == -1) { break; }
                copy_Bitcoin[i] = "0";
            }

            for (int c = 0; c < copy_Ethereum.Length; c++)
            {

                int i = Array.IndexOf(copy_Ethereum, null);
                if (i == -1) { break; }
                copy_Ethereum[i] = "0";
            }

            for (int c = 0; c < copy_Litecoin.Length; c++)
            {

                int i = Array.IndexOf(copy_Litecoin, null);
                if (i == -1) { break; }
                copy_Litecoin[i] = "0";
            }

            for (int c = 0; c < copy_Ripple.Length; c++)
            {

                int i = Array.IndexOf(copy_Ripple, null);
                if (i == -1) { break; }
                copy_Ripple[i] = "0";
            }

            for (int c = 0; c < copy_Dogecoin.Length; c++)
            {

                int i = Array.IndexOf(copy_Dogecoin, null);
                if (i == -1) { break; }
                copy_Dogecoin[i] = "0";
            }

            for (int c = 0; c < copy_Solana.Length; c++)
            {

                int i = Array.IndexOf(copy_Solana, null);
                if (i == -1) { break; }
                copy_Solana[i] = "0";
            }

            for (int c = 0; c < copy_Monero.Length; c++)
            {

                int i = Array.IndexOf(copy_Monero, null);
                if (i == -1) { break; }
                copy_Monero[i] = "0";
            }

            for (int c = 0; c < copy_Cardano.Length; c++)
            {

                int i = Array.IndexOf(copy_Cardano, null);
                if (i == -1) { break; }
                copy_Cardano[i] = "0";
            }
            
            MessageBox.Show(Array.IndexOf(copy_Bitcoin, null).ToString());
            MessageBox.Show(Array.IndexOf(copy_Ethereum, null).ToString());
            MessageBox.Show(Array.IndexOf(copy_Litecoin, null).ToString());
            MessageBox.Show(Array.IndexOf(copy_Ripple, null).ToString());
            MessageBox.Show(Array.IndexOf(copy_Dogecoin, null).ToString());
            MessageBox.Show(Array.IndexOf(copy_Solana, null).ToString());
            MessageBox.Show(Array.IndexOf(copy_Monero, null).ToString());
            MessageBox.Show(Array.IndexOf(copy_Cardano, null).ToString());

            for (int i=0; i<1490;i++) {

                SqlCommand command = new SqlCommand($"INSERT INTO [Cryptocurrency] (Bitcoin,Ethereum,Litecoin,Ripple,Dogecoin,Solana,Monero,Cardano) VALUES ({copy_Bitcoin[i]},{copy_Ethereum[i]},{copy_Litecoin[i]},{copy_Ripple[i]},{copy_Dogecoin[i]},{copy_Solana[i]},{copy_Monero[i]},{copy_Cardano[i]})", connection);

                command.ExecuteNonQuery();
            }
            */
        }

        private void FormAfterEnter_FormClosed(object sender, FormClosedEventArgs e)
        {
            Application.Exit();
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            Change_color();

            Thread myThread = new Thread(new ThreadStart(update_price));
            myThread.Start();
            BitcoinPrice.Text = BitcoinPrice2;
            EthereumPrice.Text = EthereumPrice2;
            TetherPrice.Text = TetherPrice2;
            LitecoinPrice.Text = LitecoinPrice2;
            RipplePrice.Text = RipplePrice2;
            DogecoinPrice.Text = DogecoinPrice2;
            SolanaPrice.Text = SolanaPrice2;
            MoneroPrice.Text = MoneroPrice2;
            CardanoPrice.Text = CardanoPrice2;
            TravalaPrice.Text = TravalaPrice2;
            TerraPrice.Text = TerraPrice2;


            Thread myThread2 = new Thread(new ThreadStart(update_24h_Chg));
            myThread2.Start();
            Bitcoin_24h_Chg.Text = Bitcoin_24h_Chg2 + "%";
            Ethereum_24h_Chg.Text = Ethereum_24h_Chg2 + "%";
            Tether_24h_Chg.Text = Tether_24h_Chg2 + "%";
            Litecoin_24h_Chg.Text = Litecoin_24h_Chg2 + "%";
            Ripple_24h_Chg.Text = Ripple_24h_Chg2 + "%";
            Dogecoin_24h_Chg.Text = Dogecoin_24h_Chg2 + "%";
            Solana_24h_Chg.Text = Solana_24h_Chg2 + "%";
            Monero_24h_Chg.Text = Monero_24h_Chg2 + "%";
            Cardano_24h_Chg.Text = Cardano_24h_Chg2 + "%";
            Travala_24h_Chg.Text = Travala_24h_Chg2 + "%";
            Terra_24h_Chg.Text = Terra_24h_Chg2 + "%";

            if (count_of_iter_forecasting == 0)
            {
                Bitcoin_Forecasting1.Text = Convert.ToString(Forecasting_crypto1(Convert.ToDouble(Bitcoin_24h_Chg2.Replace(".", ",")))) + "%";
                Ethereum_Forecasting1.Text = Convert.ToString(Forecasting_crypto1(Convert.ToDouble(Ethereum_24h_Chg2.Replace(".", ",")))) + "%";
                Litecoin_Forecasting1.Text = Convert.ToString(Forecasting_crypto1(Convert.ToDouble(Litecoin_24h_Chg2.Replace(".", ",")))) + "%";
                Ripple_Forecasting1.Text = Convert.ToString(Forecasting_crypto1(Convert.ToDouble(Ripple_24h_Chg2.Replace(".", ",")))) + "%";
                Dogecoin_Forecasting1.Text = Convert.ToString(Forecasting_crypto1(Convert.ToDouble(Dogecoin_24h_Chg2.Replace(".", ",")))) + "%";
                Solana_Forecasting1.Text = Convert.ToString(Forecasting_crypto1(Convert.ToDouble(Solana_24h_Chg2.Replace(".", ",")))) + "%";
                Monero_Forecasting1.Text = Convert.ToString(Forecasting_crypto1(Convert.ToDouble(Monero_24h_Chg2.Replace(".", ",")))) + "%";
                Cardano_Forecasting1.Text = Convert.ToString(Forecasting_crypto1(Convert.ToDouble(Cardano_24h_Chg2.Replace(".", ",")))) + "%";
                Travala_Forecasting1.Text = Convert.ToString(Forecasting_crypto1(Convert.ToDouble(Travala_24h_Chg2.Replace(".", ",")))) + "%";
                Terra_Forecasting1.Text = Convert.ToString(Forecasting_crypto1(Convert.ToDouble(Terra_24h_Chg2.Replace(".", ",")))) + "%";
                count_of_iter_forecasting++;
            }

            Bitcoin_Forecasting2.Text = Bitcoin_Forecasting2_percent_of_price + "%";
            Ethereum_Forecasting2.Text = Ethereum_Forecasting2_percent_of_price + "%";
            Litecoin_Forecasting2.Text = Litecoin_Forecasting2_percent_of_price + "%";
            Ripple_Forecasting2.Text = Ripple_Forecasting2_percent_of_price + "%";
            Dogecoin_Forecasting2.Text = Dogecoin_Forecasting2_percent_of_price + "%";
            Solana_Forecasting2.Text = Solana_Forecasting2_percent_of_price + "%";
            Monero_Forecasting2.Text = Monero_Forecasting2_percent_of_price + "%";
            Cardano_Forecasting2.Text = Cardano_Forecasting2_percent_of_price + "%";
            Travala_Forecasting2.Text = Travala_Forecasting2_percent_of_price + "%";
            Terra_Forecasting2.Text = Terra_Forecasting2_percent_of_price + "%";

            toolTip1.SetToolTip(Bitcoin_Forecasting2, Bitcoin_Forecasting2_price);
            toolTip1.SetToolTip(Ethereum_Forecasting2, Ethereum_Forecasting2_price);
            toolTip1.SetToolTip(Litecoin_Forecasting2, Litecoin_Forecasting2_price);
            toolTip1.SetToolTip(Ripple_Forecasting2, Ripple_Forecasting2_price);
            toolTip1.SetToolTip(Dogecoin_Forecasting2, Dogecoin_Forecasting2_price);
            toolTip1.SetToolTip(Solana_Forecasting2, Solana_Forecasting2_price);
            toolTip1.SetToolTip(Cardano_Forecasting2, Cardano_Forecasting2_price);

            Bitcoin_Forecasting3.Text = Bitcoin_Forecasting3_price;
            Ethereum_Forecasting3.Text = Ethereum_Forecasting3_price;
            Litecoin_Forecasting3.Text = Litecoin_Forecasting3_price;
            Ripple_Forecasting3.Text = Ripple_Forecasting3_price;
            Dogecoin_Forecasting3.Text = Dogecoin_Forecasting3_price;
            Solana_Forecasting3.Text = Solana_Forecasting3_price;
            Monero_Forecasting3.Text = Monero_Forecasting3_price;
            Cardano_Forecasting3.Text = Cardano_Forecasting3_price;
            Travala_Forecasting3.Text = Travala_Forecasting3_price;
            Terra_Forecasting3.Text = Terra_Forecasting3_price;

            Bitcoin_Forecasting4.Text = Bitcoin_Forecasting4_price;
            Ethereum_Forecasting4.Text = Ethereum_Forecasting4_price;
            Litecoin_Forecasting4.Text = Litecoin_Forecasting4_price;
            Ripple_Forecasting4.Text = Ripple_Forecasting4_price;
            Dogecoin_Forecasting4.Text = Dogecoin_Forecasting4_price;
            Solana_Forecasting4.Text = Solana_Forecasting4_price;
            Monero_Forecasting4.Text = Monero_Forecasting4_price;
            Cardano_Forecasting4.Text = Cardano_Forecasting4_price;
            Travala_Forecasting4.Text = Travala_Forecasting4_price;
            Terra_Forecasting4.Text = Terra_Forecasting4_price;

            Bitcoin_Forecasting5.Text = Bitcoin_Forecasting5_price;
            Ethereum_Forecasting5.Text = Ethereum_Forecasting5_price;
            Litecoin_Forecasting5.Text = Litecoin_Forecasting5_price;
            Ripple_Forecasting5.Text = Ripple_Forecasting5_price;
            Dogecoin_Forecasting5.Text = Dogecoin_Forecasting5_price;
            Solana_Forecasting5.Text = Solana_Forecasting5_price;
            Monero_Forecasting5.Text = Monero_Forecasting5_price;
            Cardano_Forecasting5.Text = Cardano_Forecasting5_price;
            Travala_Forecasting5.Text = Travala_Forecasting5_price;
            Terra_Forecasting5.Text = Terra_Forecasting5_price;

            Bitcoin_Forecasting6.Text = Bitcoin_Forecasting6_price;
            Ethereum_Forecasting6.Text = Ethereum_Forecasting6_price;
            Litecoin_Forecasting6.Text = Litecoin_Forecasting6_price;
            Ripple_Forecasting6.Text = Ripple_Forecasting6_price;
            Dogecoin_Forecasting6.Text = Dogecoin_Forecasting6_price;
            Solana_Forecasting6.Text = Solana_Forecasting6_price;
            Monero_Forecasting6.Text = Monero_Forecasting6_price;
            Cardano_Forecasting6.Text = Cardano_Forecasting6_price;
            Travala_Forecasting6.Text = Travala_Forecasting6_price;
            Terra_Forecasting6.Text = Terra_Forecasting6_price;
            Travala_Forecasting7.Text = Travala_Forecasting6_price;
            Terra_Forecasting7.Text = Terra_Forecasting6_price;

            this.Text = label_waiting_text;
        }

        string Price_coin(string url)
        {
            WebClient webClient = new WebClient();
            string responseString = webClient.DownloadString(url);
            int indexofprice = responseString.IndexOf("price") + 8;
            return responseString.Substring(indexofprice, responseString.Length - 7 - indexofprice);
        }

        string Price_change_coin(string url)
        {
            WebClient webClient = new WebClient();
            string responseString = webClient.DownloadString(url);
            int indexofprice = responseString.IndexOf("priceChangePercent") + 21;

            return responseString.Substring(indexofprice, 5);
        }

        string Forecasting2_change_coin_prise(string url)
        {
            HttpWebRequest http = (HttpWebRequest)WebRequest.Create(url);
            http.Proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
            http.UserAgent = "[any words that is more than 5 characters]";
            WebResponse response = http.GetResponse();
            Stream stream = response.GetResponseStream();
            StreamReader sr = new StreamReader(stream);
            string html = sr.ReadToEnd();
            int pos2 = html.LastIndexOf("<th>Изменение</th>");
            html = html.Substring(pos2, html.Length - pos2);
            int pos1 = html.LastIndexOf("<h2><i class=\"icon__globe\"></i>Текущий график");
            html = html.Substring(0, pos1);
            html = html.Substring(25, html.LastIndexOf("<div class=\"quotes-item__content forecast__content\">"));
            pos1 = html.IndexOf("<tr>");
            pos2 = html.IndexOf("</tr>");
            pos2 = pos2 - pos1 - 5;
            html = html.Substring(pos1 + 5, pos2);
            pos1 = html.IndexOf("</td>") + 6;
            html = html.Substring(pos1, html.Length - pos1);
            pos1 = html.IndexOf("</td>") + 6;
            html = html.Substring(pos1, html.Length - pos1);
            pos1 = html.IndexOf("Цена") + 6;
            pos2 = html.IndexOf("</td>") - pos1;
            string price = html.Substring(pos1, pos2);

            return price;
        }

        string Forecasting2_change_coin_percent_of_price(string url)
        {
            HttpWebRequest http = (HttpWebRequest)WebRequest.Create(url);
            http.Proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
            http.UserAgent = "[any words that is more than 5 characters]";
            WebResponse response = http.GetResponse();
            Stream stream = response.GetResponseStream();
            StreamReader sr = new StreamReader(stream);
            string html = sr.ReadToEnd();
            int pos2 = html.LastIndexOf("<th>Изменение</th>");
            html = html.Substring(pos2, html.Length - pos2);
            int pos1 = html.LastIndexOf("<h2><i class=\"icon__globe\"></i>Текущий график");
            html = html.Substring(0, pos1);
            html = html.Substring(25, html.LastIndexOf("<div class=\"quotes-item__content forecast__content\">"));
            pos1 = html.IndexOf("<tr>");
            pos2 = html.IndexOf("</tr>");
            pos2 = pos2 - pos1 - 5;
            html = html.Substring(pos1 + 5, pos2);
            pos1 = html.IndexOf("</td>") + 6;
            html = html.Substring(pos1, html.Length - pos1);
            pos1 = html.IndexOf("</td>") + 6;
            html = html.Substring(pos1, html.Length - pos1);
            pos1 = html.IndexOf("Цена") + 6;
            pos2 = html.IndexOf("</td>") - pos1;
            string price = html.Substring(pos1, pos2);
            pos1 = html.IndexOf("Изменение") + 11;
            pos2 = html.LastIndexOf("</td>") - pos1;
            string percent_of_price = html.Substring(pos1, pos2);

            return percent_of_price;
        }

        void update_price()
        {
            BitcoinPrice2 = Price_coin("https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT");
            EthereumPrice2 = Price_coin("https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT");
            TetherPrice2 = Price_coin("https://api.binance.com/api/v3/ticker/price?symbol=USDCUSDT");
            LitecoinPrice2 = Price_coin("https://api.binance.com/api/v3/ticker/price?symbol=LTCUSDT");
            RipplePrice2 = Price_coin("https://api.binance.com/api/v3/ticker/price?symbol=XRPUSDT");
            DogecoinPrice2 = Price_coin("https://api.binance.com/api/v3/ticker/price?symbol=DOGEUSDT");
            SolanaPrice2 = Price_coin("https://api.binance.com/api/v3/ticker/price?symbol=SOLUSDT");
            MoneroPrice2 = Price_coin("https://api.binance.com/api/v3/ticker/price?symbol=XMRUSDT");
            CardanoPrice2 = Price_coin("https://api.binance.com/api/v3/ticker/price?symbol=ADAUSDT");
            TravalaPrice2 = Price_coin("https://api.binance.com/api/v3/ticker/price?symbol=AVAUSDT");
            TerraPrice2 = Price_coin("https://api.binance.com/api/v3/ticker/price?symbol=LUNAUSDT");
            Whrite_data_every_day();
            label_waiting_text = "Курс криптовалют";
        }


        void update_24h_Chg()
        {
            Bitcoin_24h_Chg2 = Price_change_coin("https://api.binance.com/api/v3/ticker/24hr?symbol=BTCUSDT");
            Ethereum_24h_Chg2 = Price_change_coin("https://api.binance.com/api/v3/ticker/24hr?symbol=ETHUSDT");
            Tether_24h_Chg2 = Price_change_coin("https://api.binance.com/api/v3/ticker/24hr?symbol=USDCUSDT");
            Litecoin_24h_Chg2 = Price_change_coin("https://api.binance.com/api/v3/ticker/24hr?symbol=LTCUSDT");
            Ripple_24h_Chg2 = Price_change_coin("https://api.binance.com/api/v3/ticker/24hr?symbol=XRPUSDT");
            Dogecoin_24h_Chg2 = Price_change_coin("https://api.binance.com/api/v3/ticker/24hr?symbol=DOGEUSDT");
            Solana_24h_Chg2 = Price_change_coin("https://api.binance.com/api/v3/ticker/24hr?symbol=SOLUSDT");
            Monero_24h_Chg2 = Price_change_coin("https://api.binance.com/api/v3/ticker/24hr?symbol=XMRUSDT");
            Cardano_24h_Chg2 = Price_change_coin("https://api.binance.com/api/v3/ticker/24hr?symbol=ADAUSDT");
            Travala_24h_Chg2 = Price_change_coin("https://api.binance.com/api/v3/ticker/24hr?symbol=AVAUSDT");
            Terra_24h_Chg2 = Price_change_coin("https://api.binance.com/api/v3/ticker/24hr?symbol=LUNAUSDT");
        }

        void Forecasting2()
        {
            Bitcoin_Forecasting2_price = Forecasting2_change_coin_prise("https://tradersunion.com/ru/currencies/forecast/btc-usd/daily-and-weekly/");
            Ethereum_Forecasting2_price = Forecasting2_change_coin_prise("https://tradersunion.com/ru/currencies/forecast/eth-usd/daily-and-weekly/");
            Litecoin_Forecasting2_price = Forecasting2_change_coin_prise("https://tradersunion.com/ru/currencies/forecast/ltc-usd/daily-and-weekly/");
            Ripple_Forecasting2_price = Forecasting2_change_coin_prise("https://tradersunion.com/ru/currencies/forecast/xrp-usd/daily-and-weekly/");
            Dogecoin_Forecasting2_price = Forecasting2_change_coin_prise("https://tradersunion.com/ru/currencies/forecast/dogecoin/daily-and-weekly/");
            Solana_Forecasting2_price = Forecasting2_change_coin_prise("https://tradersunion.com/ru/currencies/forecast/solana/daily-and-weekly/");
            Cardano_Forecasting2_price = Forecasting2_change_coin_prise("https://tradersunion.com/ru/currencies/forecast/cardano/daily-and-weekly/");

            Bitcoin_Forecasting2_percent_of_price = Forecasting2_change_coin_percent_of_price("https://tradersunion.com/ru/currencies/forecast/btc-usd/daily-and-weekly/");
            Ethereum_Forecasting2_percent_of_price = Forecasting2_change_coin_percent_of_price("https://tradersunion.com/ru/currencies/forecast/eth-usd/daily-and-weekly/");
            Litecoin_Forecasting2_percent_of_price = Forecasting2_change_coin_percent_of_price("https://tradersunion.com/ru/currencies/forecast/ltc-usd/daily-and-weekly/");
            Ripple_Forecasting2_percent_of_price = Forecasting2_change_coin_percent_of_price("https://tradersunion.com/ru/currencies/forecast/xrp-usd/daily-and-weekly/");
            Dogecoin_Forecasting2_percent_of_price = Forecasting2_change_coin_percent_of_price("https://tradersunion.com/ru/currencies/forecast/dogecoin/daily-and-weekly/");
            Solana_Forecasting2_percent_of_price = Forecasting2_change_coin_percent_of_price("https://tradersunion.com/ru/currencies/forecast/solana/daily-and-weekly/");
            Monero_Forecasting2_percent_of_price = Forecasting2_change_coin_percent_of_price("https://tradersunion.com/ru/currencies/forecast/btc-usd/daily-and-weekly/");
            Cardano_Forecasting2_percent_of_price = Forecasting2_change_coin_percent_of_price("https://tradersunion.com/ru/currencies/forecast/cardano/daily-and-weekly/");
            Travala_Forecasting2_percent_of_price = Forecasting2_change_coin_percent_of_price("https://tradersunion.com/ru/currencies/forecast/btc-usd/daily-and-weekly/");
            Terra_Forecasting2_percent_of_price = Forecasting2_change_coin_percent_of_price("https://tradersunion.com/ru/currencies/forecast/btc-usd/daily-and-weekly/");
        }

        void Forecasting3_4() {
            ForecastTable dt = TimeSeries.simpleMovingAverage(GetInput(bitcoin), 5, 3, 0);
            Bitcoin_Forecasting3_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.weightedMovingAverage(GetInput(bitcoin), 5, (Decimal)0.05, (Decimal)0.15, (Decimal)0.8);
            Bitcoin_Forecasting4_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.simpleMovingAverage(GetInput(ethereum), 5, 3, 0);
            Ethereum_Forecasting3_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.weightedMovingAverage(GetInput(ethereum), 5, (Decimal)0.05, (Decimal)0.15, (Decimal)0.8);
            Ethereum_Forecasting4_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.simpleMovingAverage(GetInput(litecoin), 5, 3, 0);
            Litecoin_Forecasting3_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.weightedMovingAverage(GetInput(litecoin), 5, (Decimal)0.05, (Decimal)0.15, (Decimal)0.8);
            Litecoin_Forecasting4_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.simpleMovingAverage(GetInput(ripple), 5, 3, 0);
            Ripple_Forecasting3_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.weightedMovingAverage(GetInput(ripple), 5, (Decimal)0.05, (Decimal)0.15, (Decimal)0.8);
            Ripple_Forecasting4_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.simpleMovingAverage(GetInput(dogecoin), 5, 3, 0);
            Dogecoin_Forecasting3_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.weightedMovingAverage(GetInput(dogecoin), 5, (Decimal)0.05, (Decimal)0.15, (Decimal)0.8);
            Dogecoin_Forecasting4_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.simpleMovingAverage(GetInput(solana), 5, 3, 0);
            Solana_Forecasting3_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.weightedMovingAverage(GetInput(solana), 5, (Decimal)0.05, (Decimal)0.15, (Decimal)0.8);
            Solana_Forecasting4_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.simpleMovingAverage(GetInput(monero), 5, 3, 0);
            Monero_Forecasting3_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.weightedMovingAverage(GetInput(monero), 5, (Decimal)0.05, (Decimal)0.15, (Decimal)0.8);
            Monero_Forecasting4_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            cardano = cardano.TrimEnd(',');
            dt = TimeSeries.simpleMovingAverage(GetInput(cardano), 5, 3, 0);
            Cardano_Forecasting3_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.weightedMovingAverage(GetInput(cardano), 5, (Decimal)0.05, (Decimal)0.15, (Decimal)0.8);
            Cardano_Forecasting4_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.simpleMovingAverage(GetInput(travala), 5, 3, 0);
            Travala_Forecasting3_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.weightedMovingAverage(GetInput(travala), 5, (Decimal)0.05, (Decimal)0.15, (Decimal)0.8);
            Travala_Forecasting4_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            
            dt = TimeSeries.simpleMovingAverage(GetInput(terra), 5, 3, 0);
            Terra_Forecasting3_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.weightedMovingAverage(GetInput(terra), 5, (Decimal)0.05, (Decimal)0.15, (Decimal)0.8);
            Terra_Forecasting4_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
        }

        void Forecasting5_6()
        {
            ForecastTable dt = TimeSeries.simpleMovingAverage(GetInput(bitcoin), 5, 3, 0);
            Bitcoin_Forecasting5_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.adaptiveRateSmoothing(GetInput(bitcoin), 5, (Decimal)0.2, (Decimal)0.8);
            Bitcoin_Forecasting6_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.exponentialSmoothing(GetInput(ethereum), 5, (Decimal)0.8);
            Ethereum_Forecasting5_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.adaptiveRateSmoothing(GetInput(ethereum), 5, (Decimal)0.2, (Decimal)0.8);
            Ethereum_Forecasting6_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.exponentialSmoothing(GetInput(litecoin), 5, (Decimal)0.8);
            Litecoin_Forecasting5_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.adaptiveRateSmoothing(GetInput(litecoin), 5, (Decimal)0.2, (Decimal)0.8);
            Litecoin_Forecasting6_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.exponentialSmoothing(GetInput(ripple), 5, (Decimal)0.8);
            Ripple_Forecasting5_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.adaptiveRateSmoothing(GetInput(ripple), 5, (Decimal)0.2, (Decimal)0.8);
            Ripple_Forecasting6_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.exponentialSmoothing(GetInput(dogecoin), 5, (Decimal)0.8);
            Dogecoin_Forecasting5_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.adaptiveRateSmoothing(GetInput(dogecoin), 5, (Decimal)0.2, (Decimal)0.8);
            Dogecoin_Forecasting6_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.exponentialSmoothing(GetInput(solana), 5, (Decimal)0.8);
            Solana_Forecasting5_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.adaptiveRateSmoothing(GetInput(solana), 5, (Decimal)0.2, (Decimal)0.8);
            Solana_Forecasting6_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.exponentialSmoothing(GetInput(monero), 5, (Decimal)0.8);
            Monero_Forecasting5_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.adaptiveRateSmoothing(GetInput(monero), 5, (Decimal)0.2, (Decimal)0.8);
            Monero_Forecasting6_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.exponentialSmoothing(GetInput(cardano), 5, (Decimal)0.8);
            Cardano_Forecasting5_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.adaptiveRateSmoothing(GetInput(cardano), 5, (Decimal)0.2, (Decimal)0.8);
            Cardano_Forecasting6_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.exponentialSmoothing(GetInput(travala), 5, (Decimal)0.8);
            Travala_Forecasting5_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.adaptiveRateSmoothing(GetInput(travala), 5, (Decimal)0.2, (Decimal)0.8);
            Travala_Forecasting6_price = dt.Rows[dt.Rows.Count - 5][2].ToString();

            dt = TimeSeries.exponentialSmoothing(GetInput(terra), 5, (Decimal)0.8);
            Terra_Forecasting5_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
            dt = TimeSeries.adaptiveRateSmoothing(GetInput(terra), 5, (Decimal)0.2, (Decimal)0.8);
            Terra_Forecasting6_price = dt.Rows[dt.Rows.Count - 5][2].ToString();
        }

        void Forecasting7() {
            TimeSeries forecast7 = new TimeSeries();

            string _trainDataPath = Path.Combine(Environment.CurrentDirectory, "Data", "Bitcoin.csv");
            MLContext mlContext = new MLContext(seed: 0);
            var model = forecast7.Train(mlContext, _trainDataPath);

            String last_data = bitcoin.Substring(bitcoin.Length - 9);
            Bitcoin_Forecasting7.Text = forecast7.TestSinglePrediction(mlContext, model, float.Parse(last_data, CultureInfo.InvariantCulture.NumberFormat));

            _trainDataPath = Path.Combine(Environment.CurrentDirectory, "Data", "Ethereum.csv");
            mlContext = new MLContext(seed: 0);
            model = forecast7.Train(mlContext, _trainDataPath);

            last_data = ethereum.Substring(ethereum.Length - 8);
            Ethereum_Forecasting7.Text = forecast7.TestSinglePrediction(mlContext, model, float.Parse(last_data, CultureInfo.InvariantCulture.NumberFormat));

            _trainDataPath = Path.Combine(Environment.CurrentDirectory, "Data", "Litecoin.csv");
            mlContext = new MLContext(seed: 0);
            model = forecast7.Train(mlContext, _trainDataPath);

            last_data = litecoin.Substring(litecoin.Length - 6);
            Litecoin_Forecasting7.Text = forecast7.TestSinglePrediction(mlContext, model, float.Parse(last_data, CultureInfo.InvariantCulture.NumberFormat));

            _trainDataPath = Path.Combine(Environment.CurrentDirectory, "Data", "Ripple.csv");
            mlContext = new MLContext(seed: 0);
            model = forecast7.Train(mlContext, _trainDataPath);

            last_data = ripple.Substring(ripple.Length - 5);
            Ripple_Forecasting7.Text = forecast7.TestSinglePrediction(mlContext, model, float.Parse(last_data, CultureInfo.InvariantCulture.NumberFormat));

            _trainDataPath = Path.Combine(Environment.CurrentDirectory, "Data", "Dogecoin.csv");
            mlContext = new MLContext(seed: 0);
            model = forecast7.Train(mlContext, _trainDataPath);

            last_data = dogecoin.Substring(dogecoin.Length - 5);
            Dogecoin_Forecasting7.Text = forecast7.TestSinglePrediction(mlContext, model, float.Parse(last_data, CultureInfo.InvariantCulture.NumberFormat));

            _trainDataPath = Path.Combine(Environment.CurrentDirectory, "Data", "Solana.csv");
            mlContext = new MLContext(seed: 0);
            model = forecast7.Train(mlContext, _trainDataPath);

            last_data = solana.Substring(solana.Length - 6);
            Solana_Forecasting7.Text = forecast7.TestSinglePrediction(mlContext, model, float.Parse(last_data, CultureInfo.InvariantCulture.NumberFormat));

            _trainDataPath = Path.Combine(Environment.CurrentDirectory, "Data", "Monero.csv");
            mlContext = new MLContext(seed: 0);
            model = forecast7.Train(mlContext, _trainDataPath);

            last_data = monero.Substring(monero.Length - 7);
            Monero_Forecasting7.Text = forecast7.TestSinglePrediction(mlContext, model, float.Parse(last_data, CultureInfo.InvariantCulture.NumberFormat));

            _trainDataPath = Path.Combine(Environment.CurrentDirectory, "Data", "Cardano.csv");
            mlContext = new MLContext(seed: 0);
            model = forecast7.Train(mlContext, _trainDataPath);

            last_data = cardano.Substring(cardano.Length - 5);
            Cardano_Forecasting7.Text = forecast7.TestSinglePrediction(mlContext, model, float.Parse(last_data, CultureInfo.InvariantCulture.NumberFormat));

        }

        private void ButtonBitcoin_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.binance.com/ru/buy-sell-crypto");
        }

        private void ButtonEtherium_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.binance.com/ru/buy-sell-crypto");
        }

        private void ButtonTether_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.binance.com/ru/buy-sell-crypto");
        }

        private void ButtonLitecoin_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.binance.com/ru/buy-sell-crypto");
        }

        private void ButtonRipple_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.binance.com/ru/buy-sell-crypto");
        }

        private void ButtonDoge_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.binance.com/ru/buy-sell-crypto");
        }

        private void ButtonSolana_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.binance.com/ru/buy-sell-crypto");
        }

        private void ButtonMonero_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.binance.com/ru/buy-sell-crypto");
        }

        private void ButtonCardano_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.binance.com/ru/buy-sell-crypto");
        }

        private void ButtonTravala_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.binance.com/ru/buy-sell-crypto");
        }

        private void ButtonTerra_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.binance.com/ru/buy-sell-crypto");
        }

        public double Forecasting_crypto1(double change24) {
            double result;
            if (change24 == 0)
            {
                result = Forecasting.NextDouble();
            }
            else { 
                result = Forecasting.NextDouble() * (change24 * 1.5 - change24 * 0.5) + change24 * 0.5;
            }
            return Math.Round(result, 2);
        }
        public void Change_color()
        {
            if (Bitcoin_24h_Chg.Text[0] == '-')
            {
                Bitcoin_24h_Chg.ForeColor = Color.Red;
            }
            else
            {
                Bitcoin_24h_Chg.ForeColor = Color.Green;
            }
            if (Bitcoin_Forecasting1.Text[0] == '-')
            {
                Bitcoin_Forecasting1.ForeColor = Color.Red;
            }
            else
            {
                Bitcoin_Forecasting1.ForeColor = Color.Green;
            }
            if (Bitcoin_Forecasting2.Text[0] == '-')
            {
                Bitcoin_Forecasting2.ForeColor = Color.Red;
            }
            else
            {
                Bitcoin_Forecasting2.ForeColor = Color.Green;
            }
                Bitcoin_Forecasting3.ForeColor = Color.Green;
                Bitcoin_Forecasting4.ForeColor = Color.Green;
                Bitcoin_Forecasting5.ForeColor = Color.Green;
                Bitcoin_Forecasting6.ForeColor = Color.Green;
                Bitcoin_Forecasting7.ForeColor = Color.Green;
            //--------------------------------------------------------------------------------
            if (Ethereum_24h_Chg.Text[0] == '-')
            {
                Ethereum_24h_Chg.ForeColor = Color.Red;
            }
            else
            {
                Ethereum_24h_Chg.ForeColor = Color.Green;
            }
            if (Ethereum_Forecasting1.Text[0] == '-')
            {
                Ethereum_Forecasting1.ForeColor = Color.Red;
            }
            else
            {
                Ethereum_Forecasting1.ForeColor = Color.Green;
            }
            if (Ethereum_Forecasting2.Text[0] == '-')
            {
                Ethereum_Forecasting2.ForeColor = Color.Red;
            }
            else
            {
                Ethereum_Forecasting2.ForeColor = Color.Green;
            }
                Ethereum_Forecasting3.ForeColor = Color.Green;
                Ethereum_Forecasting4.ForeColor = Color.Green;
                Ethereum_Forecasting5.ForeColor = Color.Green;
                Ethereum_Forecasting6.ForeColor = Color.Green;
                Ethereum_Forecasting7.ForeColor = Color.Green;
            //--------------------------------------------------------------------------------
            if (Tether_24h_Chg.Text[0] == '-')
            {
                Tether_24h_Chg.ForeColor = Color.Red;
            }
            else
            {
                Tether_24h_Chg.ForeColor = Color.Green;
            }
            if (Tether_Forecasting1.Text[0] == '-')
            {
                Tether_Forecasting1.ForeColor = Color.Red;
            }
            else
            {
                Tether_Forecasting1.ForeColor = Color.Green;
            }
            if (Tether_Forecasting2.Text[0] == '-')
            {
                Tether_Forecasting2.ForeColor = Color.Red;
            }
            else
            {
                Tether_Forecasting2.ForeColor = Color.Green;
            }
                Tether_Forecasting3.ForeColor = Color.Green;
                Tether_Forecasting4.ForeColor = Color.Green;           
                Tether_Forecasting5.ForeColor = Color.Green;
                Tether_Forecasting6.ForeColor = Color.Green;
                Tether_Forecasting7.ForeColor = Color.Green;
            //--------------------------------------------------------------------------------
            if (Litecoin_24h_Chg.Text[0] == '-')
            {
                Litecoin_24h_Chg.ForeColor = Color.Red;
            }
            else
            {
                Litecoin_24h_Chg.ForeColor = Color.Green;
            }
            if (Litecoin_Forecasting1.Text[0] == '-')
            {
                Litecoin_Forecasting1.ForeColor = Color.Red;
            }
            else
            {
                Litecoin_Forecasting1.ForeColor = Color.Green;
            }
            if (Litecoin_Forecasting2.Text[0] == '-')
            {
                Litecoin_Forecasting2.ForeColor = Color.Red;
            }
            else
            {
                Litecoin_Forecasting2.ForeColor = Color.Green;
            }
                Litecoin_Forecasting3.ForeColor = Color.Green;
                Litecoin_Forecasting4.ForeColor = Color.Green;
                Litecoin_Forecasting5.ForeColor = Color.Green;
                Litecoin_Forecasting6.ForeColor = Color.Green;
                Litecoin_Forecasting7.ForeColor = Color.Green;
            //--------------------------------------------------------------------------------
            if (Ripple_24h_Chg.Text[0] == '-')
            {
                Ripple_24h_Chg.ForeColor = Color.Red;
            }
            else
            {
                Ripple_24h_Chg.ForeColor = Color.Green;
            }
            if (Ripple_Forecasting1.Text[0] == '-')
            {
                Ripple_Forecasting1.ForeColor = Color.Red;
            }
            else
            {
                Ripple_Forecasting1.ForeColor = Color.Green;
            }
            if (Ripple_Forecasting2.Text[0] == '-')
            {
                Ripple_Forecasting2.ForeColor = Color.Red;
            }
            else
            {
                Ripple_Forecasting2.ForeColor = Color.Green;
            }
            Ripple_Forecasting3.ForeColor = Color.Green;
            Ripple_Forecasting4.ForeColor = Color.Green;
            Ripple_Forecasting5.ForeColor = Color.Green;
            Ripple_Forecasting6.ForeColor = Color.Green;
            Ripple_Forecasting7.ForeColor = Color.Green;
            //--------------------------------------------------------------------------------
            if (Dogecoin_24h_Chg.Text[0] == '-')
            {
                Dogecoin_24h_Chg.ForeColor = Color.Red;
            }
            else
            {
                Dogecoin_24h_Chg.ForeColor = Color.Green;
            }
            if (Dogecoin_Forecasting1.Text[0] == '-')
            {
                Dogecoin_Forecasting1.ForeColor = Color.Red;
            }
            else
            {
                Dogecoin_Forecasting1.ForeColor = Color.Green;
            }
            if (Dogecoin_Forecasting2.Text[0] == '-')
            {
                Dogecoin_Forecasting2.ForeColor = Color.Red;
            }
            else
            {
                Dogecoin_Forecasting2.ForeColor = Color.Green;
            }
            Dogecoin_Forecasting3.ForeColor = Color.Green;
            Dogecoin_Forecasting4.ForeColor = Color.Green;
            Dogecoin_Forecasting5.ForeColor = Color.Green;
            Dogecoin_Forecasting6.ForeColor = Color.Green;
            Dogecoin_Forecasting7.ForeColor = Color.Green;
            //--------------------------------------------------------------------------------
            if (Solana_24h_Chg.Text[0] == '-')
            {
                Solana_24h_Chg.ForeColor = Color.Red;
            }
            else
            {
                Solana_24h_Chg.ForeColor = Color.Green;
            }
            if (Solana_Forecasting1.Text[0] == '-')
            {
                Solana_Forecasting1.ForeColor = Color.Red;
            }
            else
            {
                Solana_Forecasting1.ForeColor = Color.Green;
            }
            if (Solana_Forecasting2.Text[0] == '-')
            {
                Solana_Forecasting2.ForeColor = Color.Red;
            }
            else
            {
                Solana_Forecasting2.ForeColor = Color.Green;
            }
            Solana_Forecasting3.ForeColor = Color.Green;
            Solana_Forecasting4.ForeColor = Color.Green;
            Solana_Forecasting5.ForeColor = Color.Green;
            Solana_Forecasting6.ForeColor = Color.Green;
            Solana_Forecasting7.ForeColor = Color.Green;
            //--------------------------------------------------------------------------------
            if (Monero_24h_Chg.Text[0] == '-')
            {
                Monero_24h_Chg.ForeColor = Color.Red;
            }
            else
            {
                Monero_24h_Chg.ForeColor = Color.Green;
            }
            if (Monero_Forecasting1.Text[0] == '-')
            {
                Monero_Forecasting1.ForeColor = Color.Red;
            }
            else
            {
                Monero_Forecasting1.ForeColor = Color.Green;
            }
            if (Monero_Forecasting2.Text[0] == '-')
            {
                Monero_Forecasting2.ForeColor = Color.Red;
            }
            else
            {
                Monero_Forecasting2.ForeColor = Color.Green;
            }
            Monero_Forecasting3.ForeColor = Color.Green;
            Monero_Forecasting4.ForeColor = Color.Green;
            Monero_Forecasting5.ForeColor = Color.Green;
            Monero_Forecasting6.ForeColor = Color.Green;
            Monero_Forecasting7.ForeColor = Color.Green;
            //--------------------------------------------------------------------------------
            if (Cardano_24h_Chg.Text[0] == '-')
            {
                Cardano_24h_Chg.ForeColor = Color.Red;
            }
            else
            {
                Cardano_24h_Chg.ForeColor = Color.Green;
            }
            if (Cardano_Forecasting1.Text[0] == '-')
            {
                Cardano_Forecasting1.ForeColor = Color.Red;
            }
            else
            {
                Cardano_Forecasting1.ForeColor = Color.Green;
            }
            if (Cardano_Forecasting2.Text[0] == '-')
            {
                Cardano_Forecasting2.ForeColor = Color.Red;
            }
            else
            {
                Cardano_Forecasting2.ForeColor = Color.Green;
            }
            Cardano_Forecasting3.ForeColor = Color.Green;
            Cardano_Forecasting4.ForeColor = Color.Green;
            Cardano_Forecasting5.ForeColor = Color.Green;
            Cardano_Forecasting6.ForeColor = Color.Green;
            Cardano_Forecasting7.ForeColor = Color.Green;
            //--------------------------------------------------------------------------------
            if (Travala_24h_Chg.Text[0] == '-')
            {
                Travala_24h_Chg.ForeColor = Color.Red;
            }
            else
            {
                Travala_24h_Chg.ForeColor = Color.Green;
            }
            if (Travala_Forecasting1.Text[0] == '-')
            {
                Travala_Forecasting1.ForeColor = Color.Red;
            }
            else
            {
                Travala_Forecasting1.ForeColor = Color.Green;
            }
            if (Travala_Forecasting2.Text[0] == '-')
            {
                Travala_Forecasting2.ForeColor = Color.Red;
            }
            else
            {
                Travala_Forecasting2.ForeColor = Color.Green;
            }
                Travala_Forecasting3.ForeColor = Color.Green;
                Travala_Forecasting4.ForeColor = Color.Green;
                Travala_Forecasting5.ForeColor = Color.Green;
                Travala_Forecasting6.ForeColor = Color.Green;
            Travala_Forecasting7.ForeColor = Color.Green;
            //--------------------------------------------------------------------------------
            if (Terra_24h_Chg.Text[0] == '-')
            {
                Terra_24h_Chg.ForeColor = Color.Red;
            }
            else
            {
                Terra_24h_Chg.ForeColor = Color.Green;
            }
            if (Terra_Forecasting1.Text[0] == '-')
            {
                Terra_Forecasting1.ForeColor = Color.Red;
            }
            else
            {
                Terra_Forecasting1.ForeColor = Color.Green;
            }
            if (Terra_Forecasting2.Text[0] == '-')
            {
                Terra_Forecasting2.ForeColor = Color.Red;
            }
            else
            {
                Terra_Forecasting2.ForeColor = Color.Green;
            }
                Terra_Forecasting3.ForeColor = Color.Green;
                Terra_Forecasting4.ForeColor = Color.Green;
                Terra_Forecasting5.ForeColor = Color.Green;
                Terra_Forecasting6.ForeColor = Color.Green;
                Terra_Forecasting7.ForeColor = Color.Green;
        }
        public void Whrite_data_every_day() {

            System.Threading.Thread.Sleep(2000);
            SqlDataReader sqlDataReader = null;
            SqlCommand sqlCommand = new SqlCommand("SELECT Id, data FROM Date_of_last_use", connection);

            sqlDataReader = sqlCommand.ExecuteReader();

            string id, data_of = "";

            while (sqlDataReader.Read())
            {
                id = Convert.ToString(sqlDataReader["Id"]);
                data_of = Convert.ToString(sqlDataReader["data"]);
            }
            sqlDataReader.Close();
            DateTime datet = DateTime.Today;
            DateTime dt = DateTime.Now;
            if (datet.ToString() != data_of)
            {
                data_of = dt.ToString("MM/dd/yyyy");
                SqlCommand command = new SqlCommand($"INSERT INTO [Date_of_last_use] (data) VALUES (N'{data_of}')", connection);
                command.ExecuteNonQuery();

                SqlCommand command2 = new SqlCommand($"INSERT INTO [Cryptocurrency] (Bitcoin,Ethereum,Litecoin,Ripple,Dogecoin,Solana,Monero,Cardano,Travala,Terra) VALUES ({BitcoinPrice2},{EthereumPrice2},{LitecoinPrice2},{RipplePrice2},{DogecoinPrice2},{SolanaPrice2},{MoneroPrice2},{CardanoPrice2},{TravalaPrice2},{TerraPrice2})", connection);
                command2.ExecuteNonQuery();
            }

        }
        private Decimal[] GetInput(string values)
        {
            String[] arrStr = values.Split(",".ToArray());
            Decimal[] arrDec = new Decimal[arrStr.Length];

            for (Int32 i = 0; i < arrStr.Length; i++)
            {
                arrDec[i] = Decimal.Parse(arrStr[i], CultureInfo.InvariantCulture);
            }

            return arrDec;
        }

    }

}       